{"version":3,"sources":["webpack://JsStore/webpack/bootstrap","webpack://JsStore/./src/common/enums.ts","webpack://JsStore/./src/main/config.ts","webpack://JsStore/./src/main/log_helper.ts","webpack://JsStore/./src/main/connection_helper.ts","webpack://JsStore/./src/main/connection.ts","webpack://JsStore/./src/main/instance.ts","webpack://JsStore/./src/main/helper.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ERROR_TYPE","WORKER_STATUS","DATA_TYPE","API","EVENT","QUERY_OPTION","IDB_MODE","OCCURENCE","CONNECTION_STATUS","isLogEnabled","isRuningInWorker","type","info","this","_info","message","getMsg","throw","log","msg","Config","console","logError","error","logWarning","warn","errMsg","WorkerNotSupplied","IndexedDbUndefined","worker","isDbOpened_","isDbIdle_","requestQueue_","isCodeExecuting_","inactivityTimer_","eventQueue","middlewares","whiteListApi_","InitDb","IsDbExist","GetDbVersion","GetDbList","OpenDb","GetDbSchema","Get","Set","ChangeLogStatus","Terminate","InitKeyStore","worker_","onmessage","onMessageFromWorker_","initKeyStore_","prcoessExecutionOfQry_","onSuccess","onError","err","JsStoreWorker","KeyStore","init","processFinishedQuery_","data","finishedRequest","shift","errorOccured","errorDetails","terminate","CloseDb","length","openDb_","callEvent","RequestQueueEmpty","returnedValue","executeQry_","query","activeDbName","executeMiddleware_","input","Promise","res","index","lastIndex","callNextMiddleware","pushApi","request","resolve","reject","then","RequestQueueFilled","clearTimeout","catch","splice","push","requestQueueLength","sendRequestToWorker_","allowedQueryIndex","findIndex","item","indexOf","setTimeout","requestForWorker","postMessage","QueryExecutor","checkConnectionAndExecuteLogic","event","args","filter","ev","forEach","callback","Connection","openDb","dbName","initDb","dataBase","dropDb","DropDb","select","Select","count","Count","insert","Insert","update","Update","remove","Remove","clear","tableName","Clear","setLogStatus","status","getDbVersion","isDbExist","dbInfo","getDbList","getDbSchema","set","transaction","Transaction","on","eventCallBack","off","map","union","Union","intersect","Intersect","addPlugin","plugin","params","setup","addMiddleware","middleware","importScripts","ImportScripts","urls","enableLog"],"mappings":"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","file":"jsstore.commonjs2.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export enum ERROR_TYPE {\n    WorkerNotSupplied = \"worker_not_supplied\",\n    IndexedDbUndefined = \"indexeddb_undefined\",\n    UndefinedColumn = \"undefined_column\",\n    UndefinedValue = \"undefined_value\",\n    UndefinedColumnName = \"undefined_column_name\",\n    UndefinedDbName = \"undefined_database_name\",\n    UndefinedColumnValue = \"undefined_column_value\",\n    NotArray = \"not_array\",\n    NoValueSupplied = \"no_value_supplied\",\n    ColumnNotExist = \"column_not_exist\",\n    EnableSearchOff = \"enable_search_off\",\n    InvalidOp = \"invalid_operator\",\n    NullValue = \"null_value\",\n    WrongDataType = \"wrong_data_type\",\n    TableNotExist = \"table_not_exist\",\n    DbNotExist = \"db_not_exist\",\n    ConnectionAborted = \"connection_aborted\",\n    ConnectionClosed = \"connection_closed\",\n    NotObject = \"not_object\",\n    InvalidConfig = \"invalid_config\",\n    DbBlocked = \"Db_blocked\",\n    IndexedDbNotSupported = \"indexeddb_not_supported\",\n    NullValueInWhere = \"null_value_in_where\",\n    InvalidJoinQuery = 'invalid_join_query',\n    InvalidOrderQuery = 'invalid_order_query',\n    InvalidQuery = 'invalid_query',\n    InvalidGroupQuery = 'invalid_group_query',\n    ImportScriptsFailed = 'import_scripts_failed',\n    MethodNotExist = 'method_not_exist',\n}\n\nexport enum WORKER_STATUS {\n    Registered = \"registerd\",\n    Failed = \"failed\",\n    NotStarted = \"not_started\"\n}\n\nexport enum DATA_TYPE {\n    String = \"string\",\n    Object = \"object\",\n    Array = \"array\",\n    Number = \"number\",\n    Boolean = \"boolean\",\n    Null = \"null\",\n    DateTime = \"date_time\"\n}\n\nexport enum API {\n    InitDb = \"init_db\",\n    IsDbExist = \"is_db_exist\",\n    GetDbVersion = \"get_db_version\",\n    GetDbList = \"get_db_list\",\n    Get = \"get\",\n    Set = \"set\",\n    Select = \"select\",\n    Insert = \"insert\",\n    Update = \"update\",\n    Remove = \"remove\",\n    GetDbSchema = \"get_db_schema\",\n    OpenDb = \"open_db\",\n    Clear = \"clear\",\n    DropDb = \"drop_db\",\n    Count = \"count\",\n    ChangeLogStatus = \"change_log_status\",\n    Terminate = \"terminate\",\n    Transaction = \"transaction\",\n    InitKeyStore = \"init_keystore\",\n    CloseDb = \"close_db\",\n    Union = \"union\",\n    Intersect = \"intersect\",\n    ImportScripts = \"import_scripts\",\n}\n\nexport enum EVENT {\n    RequestQueueEmpty = \"requestQueueEmpty\",\n    RequestQueueFilled = \"requestQueueFilled\"\n}\n\nexport enum QUERY_OPTION {\n    Where = \"where\",\n    Like = 'like',\n    Regex = 'regex',\n    In = 'in',\n    Equal = \"=\",\n    Between = '-',\n    GreaterThan = '>',\n    LessThan = '<',\n    GreaterThanEqualTo = \">=\",\n    LessThanEqualTo = \"<=\",\n    NotEqualTo = \"!=\",\n    Aggregate = \"aggregate\",\n    Max = \"max\",\n    Min = \"min\",\n    Avg = \"avg\",\n    Count = \"count\",\n    Sum = \"sum\",\n    Or = \"or\",\n    Skip = \"skip\",\n    Limit = \"limit\",\n    And = \"and\",\n    IgnoreCase = \"ignoreCase\",\n    Then = \"then\"\n}\n\nexport enum IDB_MODE {\n    ReadOnly = \"readonly\",\n    ReadWrite = \"readwrite\"\n}\n\nexport enum OCCURENCE {\n    First = 'f',\n    Last = 'l',\n    Any = 'a'\n}\n\nexport enum CONNECTION_STATUS {\n    Connected = \"connected\",\n    Closed = \"closed\",\n    NotStarted = \"not_started\",\n    UnableToStart = \"unable_to_start\",\n    ClosedByJsStore = \"closed_by_jsstore\"\n}","export class Config {\n    static isLogEnabled = false;\n    static isRuningInWorker = true;\n\n}","\nimport { ERROR_TYPE, IError } from \"../common/index\";\nimport { Config } from \"./config\";\n\nexport class LogHelper implements IError {\n    type: ERROR_TYPE;\n    message: string;\n    private _info: any;\n\n    constructor(type: ERROR_TYPE, info: any = null) {\n        this.type = type;\n        this._info = info;\n        this.message = this.getMsg();\n    }\n\n    throw() {\n        throw this.get();\n    }\n\n    static log(msg) {\n        if (Config.isLogEnabled) {\n            console.log(msg);\n        }\n    }\n\n    logError() {\n        console.error(this.get());\n    }\n\n    logWarning() {\n        console.warn(this.get());\n    }\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg() {\n        let errMsg: string;\n        switch (this.type) {\n            case ERROR_TYPE.WorkerNotSupplied:\n                errMsg = \"Worker object is not passed in instance constructor\";\n                break;\n            case ERROR_TYPE.IndexedDbUndefined:\n                errMsg = \"Browser does not support indexeddb\";\n                break;\n            default:\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","import { LogHelper } from \"./log_helper\";\nimport { Config } from \"./config\";\nimport { WebWorkerRequest, EventQueue, API, WebWorkerResult, EVENT } from \"../common/index\";\n\ndeclare var JsStoreWorker;\nexport class ConnectionHelper {\n  protected activeDbName: string;\n  private worker_: Worker;\n  private isDbOpened_ = false;\n  private isDbIdle_ = true;\n  private requestQueue_: WebWorkerRequest[] = [];\n  private isCodeExecuting_ = false;\n\n  private inactivityTimer_ = -1000;\n\n  protected eventQueue: EventQueue[] = [];\n\n  protected middlewares = [];\n\n  // these apis have special permissions. These apis dont wait for database open.\n  private whiteListApi_ = [\n    API.InitDb,\n    API.IsDbExist,\n    API.GetDbVersion,\n    API.GetDbList,\n    API.OpenDb,\n    API.GetDbSchema,\n    API.Get,\n    API.Set,\n    API.ChangeLogStatus,\n    API.Terminate,\n    API.InitKeyStore\n  ];\n\n  constructor(worker?: Worker) {\n    if (worker) {\n      this.worker_ = worker;\n      this.worker_.onmessage = this.onMessageFromWorker_.bind(this);\n    } else {\n      Config.isRuningInWorker = false;\n    }\n  }\n\n  private initKeyStore_() {\n    if (Config.isRuningInWorker) {\n      this.prcoessExecutionOfQry_({\n        name: API.InitKeyStore,\n        onSuccess: function () {\n\n        },\n        onError: function (err) {\n          console.error(err);\n        }\n      }, 0);\n    }\n    else {\n      JsStoreWorker.KeyStore.init();\n    }\n\n  }\n\n  private onMessageFromWorker_(msg) {\n    this.processFinishedQuery_(msg.data);\n  }\n\n  private processFinishedQuery_(message: WebWorkerResult) {\n\n    const finishedRequest: WebWorkerRequest = this.requestQueue_.shift();\n    if (finishedRequest) {\n      LogHelper.log(`request ${finishedRequest.name} finished`);\n      if (message.errorOccured) {\n        finishedRequest.onError(message.errorDetails);\n      } else {\n        switch (finishedRequest.name) {\n          case API.OpenDb:\n          case API.InitDb:\n            this.isDbOpened_ = true; break;\n          case API.Terminate:\n            this.isDbOpened_ = false;\n            if (Config.isRuningInWorker === true) {\n              this.worker_.terminate();\n            }\n            break;\n          case API.CloseDb:\n            if (this.requestQueue_.length > 0) {\n              this.openDb_();\n            }\n            else {\n              this.isDbIdle_ = true;\n              this.callEvent(EVENT.RequestQueueEmpty, []);\n            }\n            break;\n        }\n        finishedRequest.onSuccess(message.returnedValue);\n      }\n      this.isCodeExecuting_ = false;\n      this.executeQry_();\n    }\n  }\n\n  private openDb_() {\n    this.initKeyStore_();\n    this.prcoessExecutionOfQry_({\n      name: API.OpenDb,\n      query: this.activeDbName,\n      onSuccess: function () {\n\n      },\n      onError: function (err) {\n        console.error(err);\n      }\n    }, 1);\n  }\n\n  private executeMiddleware_(input: WebWorkerRequest) {\n    return new Promise((res) => {\n      let index = 0;\n      const lastIndex = this.middlewares.length - 1;\n      const callNextMiddleware = () => {\n        if (index <= lastIndex) {\n          this.middlewares[index++](input, callNextMiddleware);\n        }\n        else {\n          res();\n        }\n      };\n      callNextMiddleware();\n    });\n  }\n\n  protected pushApi<T>(request: WebWorkerRequest): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this.executeMiddleware_(request).then(() => {\n        request.onSuccess = resolve;\n        request.onError = reject;\n        if (this.requestQueue_.length === 0) {\n          this.callEvent(EVENT.RequestQueueFilled, []);\n          if (this.isDbIdle_ === true && this.isDbOpened_ === true) {\n            this.openDb_();\n          }\n          else {\n            clearTimeout(this.inactivityTimer_);\n            this.initKeyStore_();\n          }\n        }\n        this.prcoessExecutionOfQry_(request);\n      }).catch(reject);\n    });\n  }\n\n  private prcoessExecutionOfQry_(request: WebWorkerRequest, index?: number) {\n    this.isDbIdle_ = false;\n    if (index != null) {\n      this.requestQueue_.splice(index, 0, request);\n    }\n    else {\n      this.requestQueue_.push(request);\n    }\n    LogHelper.log(\"request pushed: \" + request.name);\n    this.executeQry_();\n  }\n\n  private executeQry_() {\n    const requestQueueLength = this.requestQueue_.length;\n    if (!this.isCodeExecuting_ && requestQueueLength > 0) {\n      if (this.isDbOpened_ === true) {\n        this.sendRequestToWorker_(this.requestQueue_[0]);\n        return;\n      }\n\n      const allowedQueryIndex = this.requestQueue_.findIndex(\n        item => this.whiteListApi_.indexOf(item.name) >= 0\n      );\n\n      // shift allowed query to zeroth index\n      if (allowedQueryIndex >= 0) {\n        this.requestQueue_.splice(\n          0,\n          0,\n          this.requestQueue_.splice(allowedQueryIndex, 1)[0]\n        );\n        this.sendRequestToWorker_(this.requestQueue_[0]);\n      }\n    }\n    else if (requestQueueLength === 0 && this.isDbIdle_ === false && this.isDbOpened_) {\n      this.inactivityTimer_ = setTimeout(() => {\n        this.prcoessExecutionOfQry_({\n          name: API.CloseDb,\n          onSuccess: function () {\n\n          },\n          onError: function (err) {\n            console.error(err);\n          }\n        });\n      }, 100) as any;\n    }\n  }\n\n  private sendRequestToWorker_(request: WebWorkerRequest) {\n    this.isCodeExecuting_ = true;\n    const requestForWorker = {\n      name: request.name,\n      query: request.query\n    } as WebWorkerRequest;\n    if (Config.isRuningInWorker === true) {\n      this.worker_.postMessage(requestForWorker);\n    }\n    else {\n      new JsStoreWorker.QueryExecutor(this.processFinishedQuery_.bind(this)).checkConnectionAndExecuteLogic(requestForWorker);\n    }\n\n  }\n\n  private callEvent(event: EVENT, args: any[]) {\n    const events = this.eventQueue.filter(function (ev) {\n      if (ev.event === event) {\n        return ev;\n      }\n    });\n    events.forEach(function (ev) {\n      ev.callback(...args);\n    });\n  }\n}\n","import { ConnectionHelper } from \"./connection_helper\";\nimport {\n    SelectQuery, CountQuery, InsertQuery, SetQuery,\n    UpdateQuery, RemoveQuery, DbInfo, TranscationQuery,\n    API, IDataBase, EVENT, IPlugin\n} from \"../common/index\";\nimport { Config } from \"./config\";\n\nexport class Connection extends ConnectionHelper {\n\n    constructor(worker?: Worker) {\n        super(worker);\n    }\n\n    /**\n     *  open database\n     * \n     * @param {string} dbName \n     * @returns \n     * @memberof Instance\n     */\n    openDb(dbName: string) {\n        this.activeDbName = dbName;\n        return this.pushApi<null>({\n            name: API.OpenDb,\n            query: dbName\n        });\n    }\n\n    /**\n     * creates DataBase\n     * \n     * @param {IDataBase} dataBase \n     * @returns \n     * @memberof Instance\n     */\n    initDb(dataBase: IDataBase) {\n        this.activeDbName = dataBase.name;\n        return this.pushApi<boolean>({\n            name: API.InitDb,\n            query: dataBase\n        });\n    }\n\n    /**\n     * drop dataBase\n     * \n     * @returns \n     * @memberof Instance\n     */\n    dropDb() {\n        return this.pushApi<null>({\n            name: API.DropDb,\n            query: null\n        });\n    }\n\n    /**\n     * select data from table\n     * \n     * @template T \n     * @param {SelectQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    select<T>(query: SelectQuery) {\n        return this.pushApi<T[]>({\n            name: API.Select,\n            query: query\n        });\n    }\n\n    /**\n     * get no of record from table\n     * \n     * @param {CountQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    count(query: CountQuery) {\n        return this.pushApi<number>({\n            name: API.Count,\n            query: query\n        });\n    }\n\n    /**\n     * insert data into table\n     * \n     * @param {InsertQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    insert<T>(query: InsertQuery) {\n        return this.pushApi<number | T[]>({\n            name: API.Insert,\n            query: query\n        });\n    }\n\n    /**\n     * update data into table\n     * \n     * @param {UpdateQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    update(query: UpdateQuery) {\n        return this.pushApi<number>({\n            name: API.Update,\n            query: query\n        });\n    }\n\n    /**\n     * remove data from table\n     * \n     * @param {RemoveQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    remove(query: RemoveQuery) {\n        return this.pushApi<number>({\n            name: API.Remove,\n            query: query\n        });\n    }\n\n    /**\n     * delete all data from table\n     * \n     * @param {string} tableName \n     * @returns \n     * @memberof Instance\n     */\n    clear(tableName: string) {\n        return this.pushApi<null>({\n            name: API.Clear,\n            query: tableName\n        });\n    }\n\n    /**\n     * set log status\n     * \n     * @param {boolean} status \n     * @memberof Instance\n     */\n    setLogStatus(status: boolean) {\n        Config.isLogEnabled = status ? status : Config.isLogEnabled;\n        this.pushApi({\n            name: API.ChangeLogStatus,\n            query: Config.isLogEnabled\n        });\n    }\n\n    /**\n     * get version of database\n     * \n     * @param {(string | DbInfo)} dbName \n     * @returns \n     * @memberof Instance\n     */\n    getDbVersion(dbName: string | DbInfo) {\n        return this.pushApi<number>({\n            name: API.GetDbVersion,\n            query: dbName\n        });\n    }\n\n    /**\n     * is database exist\n     * \n     * @param {(DbInfo | string)} dbInfo \n     * @returns \n     * @memberof Instance\n     */\n    isDbExist(dbInfo: DbInfo | string) {\n        return this.pushApi<boolean>({\n            name: API.IsDbExist,\n            query: dbInfo\n        });\n    }\n\n    /**\n     * returns list of database created\n     * \n     * @returns \n     * @memberof Instance\n     */\n    getDbList() {\n        return this.pushApi<string[]>({\n            name: API.GetDbList,\n            query: null\n        });\n    }\n\n    /**\n     * get Database Schema\n     * \n     * @param {string} dbName \n     * @returns \n     * @memberof Instance\n     */\n    getDbSchema(dbName: string) {\n        return this.pushApi<IDataBase>({\n            name: API.GetDbSchema,\n            query: dbName\n        });\n    }\n\n    /**\n     * get the value from keystore table\n     * \n     * @param {string} key \n     * @returns \n     * @memberof Instance\n     */\n    get(key: string) {\n        return this.pushApi<any>({\n            name: API.Get,\n            query: key\n        });\n    }\n\n    /**\n     * set the value in keystore table \n     * \n     * @param {string} key \n     * @param {*} value \n     * @returns \n     * @memberof Instance\n     */\n    set(key: string, value: any) {\n        return this.pushApi<any>({\n            name: API.Set,\n            query: {\n                key: key, value: value\n            } as SetQuery\n        });\n    }\n\n    /**\n     * terminate the connection\n     *\n     * @returns\n     * @memberof Instance\n     */\n    terminate() {\n        return this.pushApi<void>({\n            name: API.Terminate,\n            query: null\n        });\n    }\n\n    /**\n     * execute the transaction\n     *\n     * @param {TranscationQuery} query\n     * @returns\n     * @memberof Instance\n     */\n    transaction(query: TranscationQuery) {\n        // if (Config.isRuningInWorker === true) {\n        //     (query.method as any) = query.method.toString();\n        // }\n        return this.pushApi<any>({\n            name: API.Transaction,\n            query: query\n        });\n    }\n\n    on(event: EVENT, eventCallBack: Function) {\n        this.eventQueue.push({\n            event: event,\n            callback: eventCallBack\n        });\n    }\n\n    off(event: EVENT, eventCallBack: Function) {\n        const indexes = this.eventQueue.map((ev, i) => {\n            if (ev.event === event) {\n                return i;\n            }\n        });\n        indexes.forEach(i => {\n            this.eventQueue.splice(i, 0);\n        });\n    }\n\n    union<T>(query: SelectQuery[]) {\n        return this.pushApi<T>({\n            name: API.Union,\n            query\n        });\n    }\n\n    intersect<T>(query: SelectQuery[]) {\n        return this.pushApi<T>({\n            name: API.Intersect,\n            query\n        });\n    }\n\n    addPlugin(plugin: IPlugin, params?) {\n        plugin.setup(this, params);\n    }\n\n    addMiddleware(middleware) {\n        this.middlewares.push(middleware);\n    }\n\n    importScripts(...urls: string[]) {\n        return this.pushApi({\n            name: API.ImportScripts,\n            query: urls\n        });\n    }\n}","import { Connection } from \"./connection\";\n\nexport class Instance {\n\n    constructor(worker?: Worker) {\n        console.warn('Instance is obsolete, please use Connection. Refer - https://jsstore.net/tutorial/connection/');\n        return new Connection(worker);\n    }\n}","import { Config } from \"./config\";\n\n/**\n * Enable log\n * \n */\nexport const enableLog = () => {\n    Config.isLogEnabled = true;\n};\n\n"],"sourceRoot":""}