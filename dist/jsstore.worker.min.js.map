{"version":3,"sources":["webpack://JsStoreWorker/webpack/bootstrap","webpack://JsStoreWorker/./src/common/enums.ts","webpack://JsStoreWorker/./src/worker/keystore/enums.ts","webpack://JsStoreWorker/./src/worker/keystore/business/base_logic.ts","webpack://JsStoreWorker/./src/worker/business/select/not_where.ts","webpack://JsStoreWorker/./src/worker/business/select/in.ts","webpack://JsStoreWorker/./src/worker/business/select/regex.ts","webpack://JsStoreWorker/./src/worker/business/select/where.ts","webpack://JsStoreWorker/./src/worker/keystore/business/idb_helper.ts","webpack://JsStoreWorker/./src/worker/keystore/business/remove_logic.ts","webpack://JsStoreWorker/./src/worker/keystore/business/set_logic.ts","webpack://JsStoreWorker/./src/worker/keystore/utils_logic.ts","webpack://JsStoreWorker/./src/worker/keystore/business/init_db_logic.ts","webpack://JsStoreWorker/./src/worker/keystore/business/get_logic.ts","webpack://JsStoreWorker/./src/worker/keystore/business/main_logic.ts","webpack://JsStoreWorker/./src/worker/helpers/promise.ts","webpack://JsStoreWorker/./src/worker/keystore/query_executor.ts","webpack://JsStoreWorker/./src/worker/keystore/instance.ts","webpack://JsStoreWorker/./src/worker/config.ts","webpack://JsStoreWorker/./src/worker/log_helper.ts","webpack://JsStoreWorker/./src/worker/business/base_db.ts","webpack://JsStoreWorker/./src/worker/business/drop_db.ts","webpack://JsStoreWorker/./src/worker/business/idb_helper.ts","webpack://JsStoreWorker/./src/worker/utils/is_null.ts","webpack://JsStoreWorker/./src/worker/utils/get_data_type.ts","webpack://JsStoreWorker/./src/worker/business/update/schema_checker.ts","webpack://JsStoreWorker/./src/worker/business/insert/value_checker.ts","webpack://JsStoreWorker/./src/worker/helpers/promise_all.ts","webpack://JsStoreWorker/./src/worker/helpers/auto_increment_helper.ts","webpack://JsStoreWorker/./src/worker/business/insert/values_checker.ts","webpack://JsStoreWorker/./src/worker/business/query_helper.ts","webpack://JsStoreWorker/./src/worker/business/base_helper.ts","webpack://JsStoreWorker/./src/worker/utils/get_regex_from_like_expression.ts","webpack://JsStoreWorker/./src/worker/business/where_checker.ts","webpack://JsStoreWorker/./src/worker/utils/get_object_first_key.ts","webpack://JsStoreWorker/./src/worker/business/base.ts","webpack://JsStoreWorker/./src/worker/business/clear.ts","webpack://JsStoreWorker/./src/worker/business/init_db.ts","webpack://JsStoreWorker/./src/worker/business/where_base.ts","webpack://JsStoreWorker/./src/worker/business/select/then_evaluator.ts","webpack://JsStoreWorker/./src/worker/business/select/base_select.ts","webpack://JsStoreWorker/./src/worker/business/select/group_by_helper.ts","webpack://JsStoreWorker/./src/worker/utils/remove_space.ts","webpack://JsStoreWorker/./src/worker/business/select/orderby_helper.ts","webpack://JsStoreWorker/./src/worker/business/select/join.ts","webpack://JsStoreWorker/./src/worker/utils/is_array.ts","webpack://JsStoreWorker/./src/worker/business/select/instance.ts","webpack://JsStoreWorker/./src/worker/utils/get_keys.ts","webpack://JsStoreWorker/./src/worker/utils/is_object.ts","webpack://JsStoreWorker/./src/worker/business/count/base_count.ts","webpack://JsStoreWorker/./src/worker/business/count/not_where.ts","webpack://JsStoreWorker/./src/worker/business/count/in.ts","webpack://JsStoreWorker/./src/worker/business/count/regex.ts","webpack://JsStoreWorker/./src/worker/business/count/where.ts","webpack://JsStoreWorker/./src/worker/business/count/instance.ts","webpack://JsStoreWorker/./src/worker/business/insert/instance.ts","webpack://JsStoreWorker/./src/worker/business/remove/base_remove.ts","webpack://JsStoreWorker/./src/worker/business/remove/not_where.ts","webpack://JsStoreWorker/./src/worker/business/remove/in.ts","webpack://JsStoreWorker/./src/worker/business/remove/regex.ts","webpack://JsStoreWorker/./src/worker/business/remove/where.ts","webpack://JsStoreWorker/./src/worker/business/remove/instance.ts","webpack://JsStoreWorker/./src/worker/business/update/base_update.ts","webpack://JsStoreWorker/./src/worker/business/update/not_where.ts","webpack://JsStoreWorker/./src/worker/business/update/in.ts","webpack://JsStoreWorker/./src/worker/business/update/regex.ts","webpack://JsStoreWorker/./src/worker/business/update/where.ts","webpack://JsStoreWorker/./src/worker/business/update/instance.ts","webpack://JsStoreWorker/./src/worker/business/transaction/instance.ts","webpack://JsStoreWorker/./src/worker/model/table_helper.ts","webpack://JsStoreWorker/./src/worker/model/db_helper.ts","webpack://JsStoreWorker/./src/worker/model/column.ts","webpack://JsStoreWorker/./src/worker/model/table.ts","webpack://JsStoreWorker/./src/worker/model/database.ts","webpack://JsStoreWorker/./src/worker/business/union/index.ts","webpack://JsStoreWorker/./src/worker/business/intersect/index.ts","webpack://JsStoreWorker/./src/worker/query_executor.ts","webpack://JsStoreWorker/./src/worker/start.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ERROR_TYPE","WORKER_STATUS","DATA_TYPE","API","EVENT","QUERY_OPTION","IDB_MODE","OCCURENCE","CONNECTION_STATUS","shouldAddValue","skipOrPush","skip","results","errorOccured","errorCount","onErrorOccured","e","this","onError","target","error","console","callDbDroppedByBrowser","IdbHelper","isDbDeletedByBrowser","dbStatus","conStatus","Connected","createTransaction","tableNames","callBack","transaction","dbConnection","oncomplete","ontimeout","_transaction","NotStarted","onSuccess","rowAffected","execute","initTransaction","column","cursorRequest","columnName","objectStore","index","openCursor","IDBKeyRange","only","onerror","onsuccess","cursor","result","delete","continue","tableName","onTransactionCompleted","query","onTransactionCompleted_","ex","insertData","add","update","updateDbStatus","status","err","undefined","lastError","dbName","dbRequest","self","indexedDB","open","event","message","type","IndexedDbNotSupported","onclose","Closed","ConnectionClosed","onversionchange","newVersion","close","onabort","onupgradeneeded","createObjectStore","keyPath","createIndex","unique","initTransaction_","onQueryFinished","checkConnectionAndExecuteLogic","request","executeLogic","setTimeout","createDb","returnResult","returnedValue","errorDetails","set","remove","closeDb","promise","Promise","prcoessQuery","resolve","reject","requestQueue","push","executeCode","isCodeExecuting","length","finishedRequest","shift","init","Key","Value","isLogEnabled","isRuningInWorker","info","info_","getMsg_","throw","log","msg","Config","logError","errMsg","NotArray","UndefinedColumn","UndefinedValue","UndefinedColumnName","UndefinedDbName","UndefinedColumnValue","NoValueSupplied","InvalidOp","ColumnNotExist","EnableSearchOff","NullValue","WrongDataType","TableNotExist","DbNotExist","NotObject","DbBlocked","NullValueInWhere","InvalidJoinQuery","activeDb","onDbDroppedByBrowser","deleteMetaData","parseInt","activeDbVersion","getDbList","setDbList","onDbClose","onDbVersionChange","onDbConError","onSuccess_","onError_","res","rej","tables","forEach","table","columns","autoIncrement","then","dbList","splice","indexOf","catch","deleteDb","dropDbRequest","deleteDatabase","onblocked","ReadWrite","onComplete","list","getDbVersion","dbVersion","Number","getDbSchema","getTable","find","isNull","isNaN","getDataType","Null","Array","isArray","Date","DateTime","check","setValue","tblName","every","checkByColumn_","notNull","ColumnName","checkFurther","dataType","allowedOp","prop","autoIncrementValue","checkAndModifyValue","checkAndModifyColumnValue_","checkNotNullAndDataType_","onValidationError_","columnValue","default","details","promiseAll","promises","all","getAutoIncrementValues","autoIncColumns","filter","col","map","autoIncrementKey","autoIncValues","values","checkAndModifyValues","onAutoIncValueEvaluated","autoIncrementValues","valueCheckerObj","startChecking","isTransactionQuery","isError","item","keys","promiseObj","api","isTransaction","checkAndModify","resolveReject","Select","Remove","Count","checkFetchQuery_","Insert","checkInsertQuery_","Update","checkUpdateQuery_","isInsertQryValid_","getTable_","into","tbl","skipDataCheck","in","where","checkForNullInWhere_","addGreatAndLessToNotOp_","isTableExist_","from","activeDb_","findIndex","whereQuery","containsNot","qry","NotEqualTo","addToSingleQry","GreaterThan","Or","LessThan","queryKeys","qryKeys","regexTest","regexExpression","test","isTableExist","getKeyRange","op","keyRange","Between","bound","low","high","lowerBound","GreaterThanEqualTo","upperBound","LessThanEqualTo","getPrimaryKey","primaryKey","getKeyPath","getRegexFromLikeExpression","likeExpression","filterValue","occurence","filterValues","split","Any","Last","First","RegExp","checkFlag","rowValue","In","checkIn","Like","checkLike_","Regex","checkRegex","checkComparisionOp_","val","expr","symbol","compareValue","getObjectFirstKey","Base","customError","onExceptionOccured","InvalidQuery","getColumnInfo","goToWhereLogic","indexNames","contains","Boolean","whereCheckerInstance","regexVal","executeRegexLogic","executeInLogic","executeWhereLogic","Aggregate","clearRequest","clear","tablesMetaData","listofTableCreated","isDbCreated","savedbNameIntoDbList_","setPrimaryKey_","enableSearch","options","multiEntry","version","requireDelete","objectStoreNames","deleteObjectStore","requireCreation","setCaseAndValue","caseQuery","caseQuery_","setCaseAndColumn","setColumn","columnName_","caseColumnQuery_","length_","evaluate","checkCase_","lastThen","cond","queryOption","Equal","sorted","isSubQuery","shouldEvaluateLimitAtEnd","shouldEvaluateSkipAtEnd","thenEvaluator","setPushResult","case","pushResult","removeDuplicates","datas","lookupObject","WhereBase","executeWhereUndefinedLogic","order","idbSorting","by","isOrder","orderType","toLowerCase","skipRecord","limitRecord","executeSkipAndLimitForNoWhere_","executeSkipForNoWhere_","executeLimitForNotWhere_","executeSimpleForNotWhere_","recordSkipped","advance","executeSkipAndLimitForIn_","executeSkipForIn_","executeLimitForIn_","executeSimpleForIn_","columnStore","exp","executeSkipAndLimitForRegex_","executeSkipForRegex_","executeLimitForRegex_","executeSimpleForRegex_","dir","executeSkipAndLimitForWhere_","executeSkipForWhere_","executeLimitForWhere_","executeSimpleForWhere_","processGroupBy","groupBy","lookUpObj","String","objKey","groupByColumn","executeAggregateGroupBy","grpQry","columnToAggregate","aggregateQry","aggregate","calculateAggregate","getCount","getMax","getMin","Infinity","getSum","getAvg","sumOfColumn","aggregateColumn","aggregateValType","aggregateCalculator","Max","Min","Sum","Avg","avg","sumForAvg","countForAvg","count","sum","isCountTypeString","isSumTypeString","avgColumn","removeSpace","replace","processGroupDistinctAggr","distinct","processAggregateQry","getOrderColumnInfo_","orderColumn","join","splittedByDot","valueFromFirstColumn","compareStringInDesc_","a","b","localeCompare","compareStringinAsc_","compareDefaultInDesc_","compareDefaultinAsc_","compareNumberInDesc_","compareNumberinAsc_","compareDateInDesc_","getTime","compareDateInAsc_","getValInDesc_","value1","value2","column1","column2","getValInAsc_","getValueComparer_","orderBy_","getOrderType_","sort","columnInfo","processOrderBy","orderQueryType","currentOrderQuery","orderColumnDetail","datasLength","joinQueryStack_","currentQueryStackIndex_","tablesFetched","executeJoinQuery","flatten","startExecutingJoinLogic_","onJoinQueryFinished_","Skip","Limit","as","data","slice","getJoinTableInfo_","on","with","table1","table2","jointables","joinType","jointblInfo","secondtableData","valueMatchedFromSecondTable","columnDefaultValue","table1Index","table2Index","valueFromFirstTable","valueFromSecondTable","performInnerJoin","joinOn","splittedjoinOn","splittedjoinOnbydotFirst","splittedjoinOnbydotSecond","checkJoinQuery_","tableSchemaOf1stTable","tableSchemaOf2ndTable","q","columnFound","concat","limit","isArrayQry","setLimitAndSkipEvaluationAtEnd_","queryHelper","processWhereArrayQry","processWhere_","operation","pKey","isFirstWhere","output","And","andResults","keyValue","processFirstQry","onWhereArrayQrySuccess","isOr","orQuerySuccess_","ReadOnly","or","processOrLogic_","orQueryFinish_","orInfo","orQuery","resultCount","countRequest","BaseCount","runInLogic","getDataFromSelect","valuesAffected_","return","insertData_","onQueryFinished_","onInsertData","addMethod","upsert","put","addResult","abort","BaseRemove","selectObject","keyList","pkey","whereQry","Where","processOrLogic","_orInfo","OrQuery","updateValue","suppliedValue","storedValue","cursorUpdateRequest","BaseUpdate","cursorOpenRequest","executeComplexLogic_","ignoreCase","inQuery","reqQueue","isQueryExecuting","isTxStarted_","notExistingTable","getNotExistingTable_","startExecution_","methodName","method","txLogic","MethodNotExist","insert","pushReq_","select","setResult","getResult","abortTx_","start","checkQueries_","_","startTx_","initTx_","processExecutionOfQry_","onTxCompleted_","onReqFinished_","finisehdRequest","executeRequest_","requestObj","onReqFinished","JSON","stringify","invalidTable","createMetaData","callback_","setRequireDelete_","setDbVersion_","tableVersion","dataBase","feature","Column","getHashKey","hashMap","isQueryForSameTable","queryLength","columnValKey","fetchData","selectResult","intersectQry","hashMapTemp","queries","resultPusher","fn","InitDb","IsDbExist","GetDbVersion","GetDbList","GetDbSchema","Get","Set","ChangeLogStatus","Terminate","OpenDb","InitKeyStore","CloseDb","checkForIdbSupport_","executeLogic_","returnResult_","dbStatus_","isDbDeletedByBrowser_","initDb_","changeLogStatus_","postMessage","QueryExecutor","Transaction","openDb_","isDbExist_","getDbVersion_","getDbList_","getDbSchema_","Clear","DropDb","dropDb_","get_","set_","terminate_","Union","initKeyStore_","Intersect","ImportScripts","importScripts","ImportScriptsFailed","processCreateDb","db","UnableToStart","closeDb_","ClosedByJsStore","activeDbVersion_","dbInfo","initialize","alert","ServiceWorkerGlobalScope","onmessage","onIdbNotSupproted","mozIndexedDB","webkitIndexedDB","msIndexedDB","IDBTransaction","webkitIDBTransaction","msIDBTransaction","webkitIDBKeyRange","msIDBKeyRange","setCrossBrowserIndexedDb"],"mappings":"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","file":"jsstore.worker.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","export enum ERROR_TYPE {\n    WorkerNotSupplied = \"worker_not_supplied\",\n    IndexedDbUndefined = \"indexeddb_undefined\",\n    UndefinedColumn = \"undefined_column\",\n    UndefinedValue = \"undefined_value\",\n    UndefinedColumnName = \"undefined_column_name\",\n    UndefinedDbName = \"undefined_database_name\",\n    UndefinedColumnValue = \"undefined_column_value\",\n    NotArray = \"not_array\",\n    NoValueSupplied = \"no_value_supplied\",\n    ColumnNotExist = \"column_not_exist\",\n    EnableSearchOff = \"enable_search_off\",\n    InvalidOp = \"invalid_operator\",\n    NullValue = \"null_value\",\n    WrongDataType = \"wrong_data_type\",\n    TableNotExist = \"table_not_exist\",\n    DbNotExist = \"db_not_exist\",\n    ConnectionAborted = \"connection_aborted\",\n    ConnectionClosed = \"connection_closed\",\n    NotObject = \"not_object\",\n    InvalidConfig = \"invalid_config\",\n    DbBlocked = \"Db_blocked\",\n    IndexedDbNotSupported = \"indexeddb_not_supported\",\n    NullValueInWhere = \"null_value_in_where\",\n    InvalidJoinQuery = 'invalid_join_query',\n    InvalidOrderQuery = 'invalid_order_query',\n    InvalidQuery = 'invalid_query',\n    InvalidGroupQuery = 'invalid_group_query',\n    ImportScriptsFailed = 'import_scripts_failed',\n    MethodNotExist = 'method_not_exist',\n}\n\nexport enum WORKER_STATUS {\n    Registered = \"registerd\",\n    Failed = \"failed\",\n    NotStarted = \"not_started\"\n}\n\nexport enum DATA_TYPE {\n    String = \"string\",\n    Object = \"object\",\n    Array = \"array\",\n    Number = \"number\",\n    Boolean = \"boolean\",\n    Null = \"null\",\n    DateTime = \"date_time\"\n}\n\nexport enum API {\n    InitDb = \"init_db\",\n    IsDbExist = \"is_db_exist\",\n    GetDbVersion = \"get_db_version\",\n    GetDbList = \"get_db_list\",\n    Get = \"get\",\n    Set = \"set\",\n    Select = \"select\",\n    Insert = \"insert\",\n    Update = \"update\",\n    Remove = \"remove\",\n    GetDbSchema = \"get_db_schema\",\n    OpenDb = \"open_db\",\n    Clear = \"clear\",\n    DropDb = \"drop_db\",\n    Count = \"count\",\n    ChangeLogStatus = \"change_log_status\",\n    Terminate = \"terminate\",\n    Transaction = \"transaction\",\n    InitKeyStore = \"init_keystore\",\n    CloseDb = \"close_db\",\n    Union = \"union\",\n    Intersect = \"intersect\",\n    ImportScripts = \"import_scripts\",\n}\n\nexport enum EVENT {\n    RequestQueueEmpty = \"requestQueueEmpty\",\n    RequestQueueFilled = \"requestQueueFilled\"\n}\n\nexport enum QUERY_OPTION {\n    Where = \"where\",\n    Like = 'like',\n    Regex = 'regex',\n    In = 'in',\n    Equal = \"=\",\n    Between = '-',\n    GreaterThan = '>',\n    LessThan = '<',\n    GreaterThanEqualTo = \">=\",\n    LessThanEqualTo = \"<=\",\n    NotEqualTo = \"!=\",\n    Aggregate = \"aggregate\",\n    Max = \"max\",\n    Min = \"min\",\n    Avg = \"avg\",\n    Count = \"count\",\n    Sum = \"sum\",\n    Or = \"or\",\n    Skip = \"skip\",\n    Limit = \"limit\",\n    And = \"and\",\n    IgnoreCase = \"ignoreCase\",\n    Then = \"then\"\n}\n\nexport enum IDB_MODE {\n    ReadOnly = \"readonly\",\n    ReadWrite = \"readwrite\"\n}\n\nexport enum OCCURENCE {\n    First = 'f',\n    Last = 'l',\n    Any = 'a'\n}\n\nexport enum CONNECTION_STATUS {\n    Connected = \"connected\",\n    Closed = \"closed\",\n    NotStarted = \"not_started\",\n    UnableToStart = \"unable_to_start\",\n    ClosedByJsStore = \"closed_by_jsstore\"\n}","export enum CONNECTION_STATUS {\n    Connected = \"connected\",\n    Closed = \"closed\",\n    NotStarted = \"not_connected\"\n}","import { IError } from \"../interfaces\";\n\nexport class Base {\n    results = null;\n    onSuccess: (results) => void;\n    onError: (err: IError) => void;\n    errorOccured = false;\n    errorCount = 0;\n    transaction: IDBTransaction;\n    objectStore: IDBObjectStore;\n\n    protected onErrorOccured(e) {\n        ++this.errorCount;\n        if (this.errorCount === 1) {\n            if (this.onError != null) {\n                this.onError((e as any).target.error);\n            }\n        }\n        console.error(e);\n    }\n}","import { BaseSelect } from \"./base_select\";\nimport { LogHelper } from \"../../log_helper\";\nimport { ERROR_TYPE } from \"../../../common/index\";\nlet cursorRequest: IDBRequest;\nexport class NotWhere extends BaseSelect {\n    protected executeWhereUndefinedLogic() {\n        if (this.query.order && this.query.order.idbSorting !== false && this.query.order.by) {\n            if (this.objectStore.indexNames.contains(this.query.order.by as string)) {\n                const orderType: IDBCursorDirection = this.query.order.type &&\n                    this.query.order.type.toLowerCase() === 'desc' ? 'prev' : 'next';\n                this.sorted = true;\n                cursorRequest = this.objectStore.index(this.query.order.by as string).\n                    openCursor(null, orderType);\n            }\n            else {\n                const error = new LogHelper(ERROR_TYPE.ColumnNotExist, { column: this.query.order.by, isOrder: true });\n                this.onErrorOccured(error, true);\n                return;\n            }\n        }\n        else {\n            cursorRequest = this.objectStore.openCursor();\n        }\n\n        cursorRequest.onerror = this.onErrorOccured;\n\n        if (this.shouldEvaluateLimitAtEnd === false && this.shouldEvaluateSkipAtEnd === false) {\n            if (this.skipRecord && this.limitRecord) {\n                this.executeSkipAndLimitForNoWhere_();\n            }\n            else if (this.skipRecord) {\n                this.executeSkipForNoWhere_();\n            }\n            else if (this.limitRecord) {\n                this.executeLimitForNotWhere_();\n            }\n            else {\n                this.executeSimpleForNotWhere_();\n            }\n        }\n        else {\n            this.executeSimpleForNotWhere_();\n        }\n    }\n\n    private executeSkipAndLimitForNoWhere_() {\n        let recordSkipped = false,\n            cursor: IDBCursorWithValue;\n        cursorRequest.onsuccess = (e) => {\n            cursor = (e as any).target.result;\n            if (cursor) {\n                if (recordSkipped && this.results.length !== this.limitRecord) {\n                    this.pushResult(cursor.value);\n                    cursor.continue();\n                }\n                else {\n                    recordSkipped = true;\n                    cursor.advance(this.skipRecord);\n                }\n            } else {\n                this.onQueryFinished();\n            }\n        };\n    }\n\n    private executeSkipForNoWhere_() {\n        let recordSkipped = false,\n            cursor;\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (recordSkipped) {\n                    this.pushResult(cursor.value);\n                    cursor.continue();\n                }\n                else {\n                    recordSkipped = true;\n                    cursor.advance(this.skipRecord);\n                }\n            } else {\n                this.onQueryFinished();\n            }\n        };\n    }\n\n    private executeSimpleForNotWhere_() {\n        let cursor;\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                this.pushResult(cursor.value);\n                (cursor as any).continue();\n            }\n            else {\n                this.onQueryFinished();\n            }\n        };\n    }\n\n    private executeLimitForNotWhere_() {\n        let cursor;\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor && this.results.length !== this.limitRecord) {\n                this.pushResult(cursor.value);\n                cursor.continue();\n            } else {\n                this.onQueryFinished();\n            }\n        };\n    }\n}\n","import { NotWhere } from \"./not_where\";\nimport { promiseAll, promise } from \"../../helpers/index\";\n\nlet shouldAddValue: () => boolean;\nlet skipOrPush: (val) => void;\nlet skip;\nlet cursor: IDBCursorWithValue;\nexport class In extends NotWhere {\n    protected executeInLogic(column, values) {\n        skip = this.skipRecord;\n        skipOrPush = (val) => {\n            if (skip === 0) {\n                this.pushResult(val);\n            }\n            else {\n                --skip;\n            }\n        };\n        shouldAddValue = () => {\n            return this.whereCheckerInstance.check(cursor.value);\n        };\n        if (this.shouldEvaluateLimitAtEnd === false && this.shouldEvaluateSkipAtEnd === false) {\n            if (this.skipRecord && this.limitRecord) {\n                this.executeSkipAndLimitForIn_(column, values);\n            }\n            else if (this.skipRecord) {\n                this.executeSkipForIn_(column, values);\n            }\n            else if (this.limitRecord) {\n                this.executeLimitForIn_(column, values);\n            }\n            else {\n                this.executeSimpleForIn_(column, values);\n            }\n        }\n        else {\n            this.executeSimpleForIn_(column, values);\n        }\n    }\n\n    private executeSkipAndLimitForIn_(column, values) {\n        let cursorRequest: IDBRequest;\n        const columnStore = this.objectStore.index(column);\n\n        const runInLogic: (val) => Promise<void> = (value) => {\n            return promise((res, rej) => {\n                cursorRequest = columnStore.openCursor(this.getKeyRange(value));\n                cursorRequest.onsuccess = (e: any) => {\n                    cursor = e.target.result;\n                    if (this.results.length !== this.limitRecord && cursor) {\n                        if (shouldAddValue()) {\n                            skipOrPush(cursor.value);\n                        }\n                        cursor.continue();\n                    }\n                    else {\n                        res();\n                    }\n                };\n                cursorRequest.onerror = rej;\n            });\n        };\n\n        promiseAll(\n            values.map(function (val) {\n                return runInLogic(val);\n            })\n        ).then(() => {\n            this.onQueryFinished();\n        }).catch(err => {\n            this.onErrorOccured(err);\n        });\n    }\n\n    private executeSkipForIn_(column, values) {\n\n        let cursorRequest: IDBRequest;\n        const columnStore = this.objectStore.index(column);\n        const runInLogic: (val) => Promise<void> = (value) => {\n            return promise((res, rej) => {\n                cursorRequest = columnStore.openCursor(this.getKeyRange(value));\n                cursorRequest.onsuccess = (e: any) => {\n                    cursor = e.target.result;\n                    if (cursor) {\n                        if (shouldAddValue()) {\n                            skipOrPush((cursor.value));\n                        }\n                        cursor.continue();\n                    }\n                    else {\n                        res();\n                    }\n                };\n                cursorRequest.onerror = rej;\n            });\n        };\n\n        promiseAll(\n            values.map(function (val) {\n                return runInLogic(val);\n            })\n        ).then(() => {\n            this.onQueryFinished();\n        }).catch(err => {\n            this.onErrorOccured(err);\n        });\n    }\n\n    private executeLimitForIn_(column, values) {\n        let cursorRequest: IDBRequest;\n        const columnStore = this.objectStore.index(column);\n        const runInLogic = (value) => {\n            return promise((res, rej) => {\n                cursorRequest = columnStore.openCursor(this.getKeyRange(value));\n                cursorRequest.onsuccess = (e: any) => {\n                    cursor = e.target.result;\n                    if (cursor && this.results.length !== this.limitRecord) {\n                        if (shouldAddValue()) {\n                            this.pushResult(cursor.value);\n                        }\n                        cursor.continue();\n                    }\n                    else {\n                        res();\n                    }\n                };\n                cursorRequest.onerror = rej;\n            });\n        };\n\n        promiseAll(\n            values.map(function (val) {\n                return runInLogic(val);\n            })\n        ).then(() => {\n            this.onQueryFinished();\n        }).catch(err => {\n            this.onErrorOccured(err);\n        });\n    }\n\n    private executeSimpleForIn_(column, values) {\n        let cursorRequest: IDBRequest;\n        const columnStore = this.objectStore.index(column);\n        const runInLogic = (value) => {\n            return promise((res, rej) => {\n                cursorRequest = columnStore.openCursor(this.getKeyRange(value));\n                cursorRequest.onsuccess = (e: any) => {\n                    cursor = e.target.result;\n                    if (cursor) {\n                        if (shouldAddValue()) {\n                            this.pushResult(cursor.value);\n                        }\n                        cursor.continue();\n                    }\n                    else {\n                        res();\n                    }\n                };\n                cursorRequest.onerror = rej;\n            });\n        };\n\n        promiseAll(\n            values.map(function (val) {\n                return runInLogic(val);\n            })\n        ).then(() => {\n            this.onQueryFinished();\n        }).catch(err => {\n            this.onErrorOccured(err);\n        });\n    }\n}","import { In } from \"./in\";\n\nlet shouldAddValue: () => boolean;\nlet skipOrPush: (val) => void;\nlet skip;\nlet cursor: IDBCursorWithValue;\nlet cursorRequest: IDBRequest;\nexport class Regex extends In {\n    protected executeRegexLogic(column, exp: RegExp) {\n\n        skip = this.skipRecord;\n        this.regexExpression = exp;\n        skipOrPush = (val) => {\n            if (skip === 0) {\n                this.pushResult(val);\n            }\n            else {\n                --skip;\n            }\n        };\n        shouldAddValue = () => {\n            return this.regexTest(cursor.key) &&\n                this.whereCheckerInstance.check(cursor.value);\n        };\n\n        cursorRequest = this.objectStore.index(column).openCursor();\n        cursorRequest.onerror = this.onErrorOccured;\n        if (this.shouldEvaluateLimitAtEnd === false && this.shouldEvaluateSkipAtEnd === false) {\n            if (this.skipRecord && this.limitRecord) {\n                this.executeSkipAndLimitForRegex_();\n            }\n            else if (this.skipRecord) {\n                this.executeSkipForRegex_();\n            }\n            else if (this.limitRecord) {\n                this.executeLimitForRegex_();\n            }\n            else {\n                this.executeSimpleForRegex_();\n            }\n        }\n        else {\n            this.executeSimpleForRegex_();\n        }\n    }\n\n    private executeSkipAndLimitForRegex_() {\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (this.results.length !== this.limitRecord && cursor) {\n                if (shouldAddValue()) {\n                    skipOrPush(cursor.value);\n                }\n                cursor.continue();\n            } else {\n                this.onQueryFinished();\n            }\n        };\n    }\n\n    private executeSkipForRegex_() {\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (shouldAddValue()) {\n                    skipOrPush((cursor.value));\n                }\n                cursor.continue();\n            } else {\n                this.onQueryFinished();\n            }\n        };\n    }\n\n    private executeLimitForRegex_() {\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (this.results.length !== this.limitRecord && cursor) {\n                if (shouldAddValue()) {\n                    this.pushResult(cursor.value);\n                }\n                cursor.continue();\n            } else {\n                this.onQueryFinished();\n            }\n        };\n    }\n\n    private executeSimpleForRegex_() {\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (shouldAddValue()) {\n                    this.pushResult(cursor.value);\n                }\n                cursor.continue();\n            } else {\n                this.onQueryFinished();\n            }\n        };\n    }\n}","import { Regex } from \"./regex\";\n\nlet shouldAddValue: () => boolean;\nlet cursor: IDBCursorWithValue;\nlet cursorRequest: IDBRequest;\nexport class Where extends Regex {\n\n    protected executeWhereLogic(column, value, op, dir) {\n        shouldAddValue = () => {\n            return this.whereCheckerInstance.check(cursor.value);\n        };\n        value = op ? value[op] : value;\n        cursorRequest = this.objectStore.index(column).openCursor(\n            this.getKeyRange(value, op),\n            dir\n        );\n\n        cursorRequest.onerror = this.onErrorOccured;\n\n        if (this.shouldEvaluateLimitAtEnd === false && this.shouldEvaluateSkipAtEnd === false) {\n            if (this.skipRecord && this.limitRecord) {\n                this.executeSkipAndLimitForWhere_();\n            }\n            else if (this.skipRecord) {\n                this.executeSkipForWhere_();\n            }\n            else if (this.limitRecord) {\n                this.executeLimitForWhere_();\n            }\n            else {\n                this.executeSimpleForWhere_();\n            }\n        }\n        else {\n            this.executeSimpleForWhere_();\n        }\n\n    }\n\n    private executeSkipAndLimitForWhere_() {\n        let recordSkipped = false;\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (recordSkipped && this.results.length !== this.limitRecord) {\n                    if (shouldAddValue()) {\n                        this.pushResult(cursor.value);\n                    }\n                    cursor.continue();\n                }\n                else {\n                    recordSkipped = true;\n                    cursor.advance(this.skipRecord);\n                }\n            }\n            else {\n                this.onQueryFinished();\n            }\n        };\n    }\n\n    private executeSkipForWhere_() {\n        let recordSkipped = false;\n\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (recordSkipped) {\n                    if (shouldAddValue()) {\n                        this.pushResult(cursor.value);\n                    }\n                    cursor.continue();\n                }\n                else {\n                    recordSkipped = true;\n                    cursor.advance(this.skipRecord);\n                }\n            }\n            else {\n                this.onQueryFinished();\n            }\n        };\n    }\n\n    private executeLimitForWhere_() {\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor && this.results.length !== this.limitRecord) {\n                if (shouldAddValue()) {\n                    this.pushResult(cursor.value);\n                }\n                cursor.continue();\n            }\n            else {\n                this.onQueryFinished();\n            }\n        };\n\n    }\n\n    private executeSimpleForWhere_() {\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (shouldAddValue()) {\n                    this.pushResult(cursor.value);\n                }\n                cursor.continue();\n            }\n            else {\n                this.onQueryFinished();\n            }\n        };\n    }\n}","import { CONNECTION_STATUS } from '../enums';\nimport { IDbStatus } from '../interfaces';\n\nexport class IdbHelper {\n    static dbConnection: IDBDatabase;\n    static isDbDeletedByBrowser: boolean;\n    static transaction: IDBTransaction = null;\n\n    static dbStatus: IDbStatus = {\n        conStatus: CONNECTION_STATUS.NotStarted,\n    };\n\n    static callDbDroppedByBrowser() {\n        IdbHelper.isDbDeletedByBrowser = IdbHelper.dbStatus.conStatus === CONNECTION_STATUS.Connected ? true : false;\n    }\n\n    static createTransaction(tableNames, callBack: () => void, mode?) {\n        if (IdbHelper.transaction === null) {\n            mode = mode ? mode : \"readwrite\";\n            IdbHelper.transaction = IdbHelper.dbConnection.transaction(tableNames, mode);\n            IdbHelper.transaction.oncomplete = () => {\n                IdbHelper.transaction = null;\n                callBack();\n            };\n            (IdbHelper.transaction as any).ontimeout = function () {\n                this._transaction = null;\n                console.error('transaction timed out');\n            };\n        }\n    }\n}","import { Base } from \"./base_logic\";\nimport { IError } from \"../interfaces\";\nimport { QueryExecutor } from \"../query_executor\";\nimport { IdbHelper } from \"./idb_helper\";\n\nexport class Remove extends Base {\n    key: string;\n    rowAffected = 0;\n    constructor(key: string, onSuccess: (recordRemoved: number) => void, onError: (err: IError) => void) {\n        super();\n        this.key = key;\n        this.onSuccess = onSuccess;\n        this.onError = onError;\n    }\n\n    execute() {\n        this.initTransaction();\n        const removeData = (column, value) => {\n            const cursorRequest = this.objectStore.index(column).openCursor(IDBKeyRange.only(value));\n            cursorRequest.onerror = (e) => {\n                this.errorOccured = true;\n                this.onErrorOccured(e);\n            };\n            cursorRequest.onsuccess = (e: any) => {\n                const cursor: IDBCursorWithValue = e.target.result;\n                if (cursor) {\n                    cursor.delete();\n                    ++this.rowAffected;\n                    cursor.continue();\n                }\n            };\n        };\n\n        if (!this.errorOccured) {\n            removeData(QueryExecutor.columnName, this.key);\n        }\n    }\n\n    private initTransaction() {\n        IdbHelper.createTransaction([QueryExecutor.tableName], this.onTransactionCompleted.bind(this));\n        this.objectStore = IdbHelper.transaction.objectStore(QueryExecutor.tableName);\n    }\n\n    private onTransactionCompleted() {\n        if (this.errorOccured === false) {\n            this.onSuccess(this.rowAffected);\n        }\n    }\n}","import { Base } from \"./base_logic\";\nimport { IInsert, IError } from \"../interfaces\";\nimport { IdbHelper } from \"./idb_helper\";\nimport { QueryExecutor } from \"../query_executor\";\n\nexport class Set extends Base {\n    query: IInsert;\n    constructor(query: IInsert, onSuccess: (result) => void, onError: (err: IError) => void) {\n        super();\n        try {\n            this.query = query;\n            this.onSuccess = onSuccess;\n            this.onError = onError;\n        }\n        catch (ex) {\n            console.error(ex);\n        }\n    }\n\n    execute() {\n        const updateIfExistElseInsert = () => {\n            const cursorRequest = this.objectStore.index(QueryExecutor.columnName).openCursor(\n                IDBKeyRange.only(this.query[QueryExecutor.columnName])\n            );\n            cursorRequest.onsuccess = (e) => {\n                const cursor: IDBCursorWithValue = (e as any).target.result;\n                if (cursor) {\n                    cursor.update(this.query);\n                }\n                else {\n                    insertData();\n                }\n            };\n\n            cursorRequest.onerror = (e) => {\n                this.errorOccured = true;\n                this.onErrorOccured(e);\n            };\n\n        };\n        const insertData = () => {\n            const addResult = this.objectStore.add(this.query);\n            addResult.onerror = (e) => {\n                this.errorOccured = true;\n                this.onErrorOccured(e);\n            };\n        };\n        this.initTransaction();\n        updateIfExistElseInsert();\n    }\n\n    private initTransaction() {\n        IdbHelper.createTransaction([QueryExecutor.tableName], this.onTransactionCompleted_);\n        this.objectStore = IdbHelper. transaction.objectStore(QueryExecutor.tableName);\n    }\n\n    private onTransactionCompleted_ = () => {\n        if (this.errorOccured === false && this.onSuccess) {\n            this.onSuccess(null);\n        }\n    }\n}","import { CONNECTION_STATUS } from './enums';\nimport { IdbHelper } from './business/idb_helper';\n\nexport class Utils {\n\n    static updateDbStatus(status: CONNECTION_STATUS, err?) {\n        if (err === undefined) {\n            IdbHelper.dbStatus.conStatus = status;\n        }\n        else {\n            IdbHelper.dbStatus = {\n                conStatus: status,\n                lastError: err\n            };\n        }\n    }\n}\n","import { IError } from \"../interfaces\";\nimport { CONNECTION_STATUS } from \"../enums\";\nimport { Utils } from \"../utils_logic\";\nimport { IdbHelper } from \"./idb_helper\";\nimport { QueryExecutor } from \"../query_executor\";\nimport { ERROR_TYPE } from \"../../../common/index\";\n\nexport let tempDatas;\nexport class InitDb {\n    constructor(dbName: string, onSuccess: () => void, onError: (err: IError) => void) {\n        const dbRequest = self.indexedDB.open(dbName, 1);\n        IdbHelper.isDbDeletedByBrowser = false;\n        dbRequest.onerror = (event) => {\n            if ((event as any).target.error.name === 'InvalidStateError') {\n                onError({\n                    message: \"Indexeddb is blocked\",\n                    type: ERROR_TYPE.IndexedDbNotSupported\n                } as IError);\n            }\n            else {\n                onError((event as any).target.error);\n            }\n        };\n\n        dbRequest.onsuccess = (event) => {\n            IdbHelper.dbStatus.conStatus = CONNECTION_STATUS.Connected;\n            IdbHelper.dbConnection = dbRequest.result;\n            IdbHelper.dbConnection.onclose = () => {\n                IdbHelper.callDbDroppedByBrowser();\n                Utils.updateDbStatus(CONNECTION_STATUS.Closed, ERROR_TYPE.ConnectionClosed);\n            };\n\n            IdbHelper.dbConnection.onversionchange = (e: any) => {\n                if (e.newVersion === null) { // An attempt is made to delete the db\n                    e.target.close(); // Manually close our connection to the db\n                    IdbHelper.callDbDroppedByBrowser();\n                    Utils.updateDbStatus(CONNECTION_STATUS.Closed, ERROR_TYPE.ConnectionClosed);\n                }\n            };\n\n            IdbHelper.dbConnection.onerror = (e: any) => {\n                IdbHelper.dbStatus.lastError = \"Error occured in connection :\" + e.target.result;\n            };\n\n            IdbHelper.dbConnection.onabort = (e) => {\n                IdbHelper.dbStatus = {\n                    conStatus: CONNECTION_STATUS.Closed,\n                    lastError: \"Connection aborted\"\n                };\n            };\n\n            if (onSuccess != null) {\n                onSuccess();\n            }\n        };\n\n        dbRequest.onupgradeneeded = (event: any) => {\n            const db = event.target.result,\n                column = \"Key\";\n            db.createObjectStore(QueryExecutor.tableName, {\n                keyPath: column\n            }).createIndex(column, column, { unique: true });\n        };\n    }\n}","import { Base } from \"./base_logic\";\nimport { IError } from \"../interfaces\";\nimport { QueryExecutor } from \"../query_executor\";\nimport { IdbHelper } from \"./idb_helper\";\n\nexport class Get extends Base {\n    key: string;\n    constructor(key: string, onSuccess: (result) => void, onError: (err: IError) => void) {\n        super();\n        this.key = key;\n        this.onSuccess = onSuccess;\n        this.onError = onError;\n    }\n\n    execute() {\n        const getData = (column, value) => {\n            const cursorRequest = this.objectStore.index(column).openCursor(IDBKeyRange.only(value));\n            cursorRequest.onerror = (e) => {\n                this.errorOccured = true;\n                this.onErrorOccured(e);\n            };\n            cursorRequest.onsuccess = (e: any) => {\n                const cursor: IDBCursorWithValue = e.target.result;\n                if (cursor) {\n                    this.results = cursor.value['Value'];\n                }\n            };\n        };\n        this.initTransaction_();\n        getData(QueryExecutor.columnName, this.key);\n\n    }\n\n    private initTransaction_() {\n        IdbHelper.createTransaction([QueryExecutor.tableName], this.onTransactionCompleted_, 'readonly');\n        this.objectStore = IdbHelper. transaction.objectStore(QueryExecutor.tableName);\n    }\n\n    private onTransactionCompleted_ = () => {\n        if (this.errorOccured === false) {\n            this.onSuccess(this.results);\n        }\n    }\n}\n","import { QueryExecutor } from '../query_executor';\nimport { CONNECTION_STATUS } from \"../enums\";\nimport { IInsert, IError, IQueryRequest, IQueryResult } from \"../interfaces\";\nimport { Remove } from \"./remove_logic\";\nimport { Set } from \"./set_logic\";\nimport { InitDb } from \"./init_db_logic\";\nimport { Get } from \"./get_logic\";\nimport { IdbHelper } from './idb_helper';\n\nexport class Main {\n    onQueryFinished: (result) => void;\n    constructor(onQueryFinished = null) {\n        this.onQueryFinished = onQueryFinished;\n    }\n\n    checkConnectionAndExecuteLogic(request: IQueryRequest) {\n        if (request.name === 'init_db') {\n            this.executeLogic(request);\n        }\n        else {\n            switch (IdbHelper.dbStatus.conStatus) {\n                case CONNECTION_STATUS.Connected: this.executeLogic(request); break;\n                case CONNECTION_STATUS.NotStarted:\n                    setTimeout(() => {\n                        this.checkConnectionAndExecuteLogic(request);\n                    }, 100); break;\n                case CONNECTION_STATUS.Closed:\n                    if (IdbHelper.isDbDeletedByBrowser) {\n                        this.createDb(() => {\n                            IdbHelper.isDbDeletedByBrowser = false;\n                            this.checkConnectionAndExecuteLogic(request);\n                        }, (err) => {\n                            console.error(err);\n                        });\n                    }\n            }\n        }\n    }\n\n    private returnResult(result) {\n        this.onQueryFinished(result);\n    }\n\n    private executeLogic(request: IQueryRequest) {\n        const onSuccess = (results?) => {\n            this.returnResult({\n                returnedValue: results\n            } as IQueryResult);\n        };\n        const onError = (err) => {\n            this.returnResult({\n                errorDetails: err,\n                errorOccured: true\n            } as IQueryResult);\n        };\n\n        switch (request.name) {\n            case 'get':\n                this.get(request.query, onSuccess, onError);\n                break;\n            case 'set': this.set(request.query, onSuccess, onError);\n                break;\n            case 'remove': this.remove(request.query, onSuccess, onError);\n                break;\n            case 'init_db': this.createDb(onSuccess, onError); break;\n            case 'close_db': this.closeDb(onSuccess, onError); break;\n        }\n    }\n\n    set(query: IInsert, onSuccess: (result) => void, onError: (err: IError) => void) {\n        const insertInstance = new Set(query, onSuccess, onError);\n        insertInstance.execute();\n    }\n\n    remove(key: string, onSuccess: (result) => void, onError: (err: IError) => void) {\n        const deleteInstance = new Remove(key, onSuccess, onError);\n        deleteInstance.execute();\n    }\n\n    get(key: string, onSuccess: (result) => void, onError: (err: IError) => void) {\n        const getInstance = new Get(key, onSuccess, onError);\n        getInstance.execute();\n    }\n\n    createDb(onSuccess: () => void, onError: (err: IError) => void) {\n        const dbName = \"KeyStore\";\n        const initDbInstance = new InitDb(dbName, onSuccess, onError);\n    }\n\n    closeDb(onSuccess: () => void, onError: (err: IError) => void) {\n        if (IdbHelper.dbStatus.conStatus === CONNECTION_STATUS.Connected) {\n            IdbHelper.dbStatus.conStatus = CONNECTION_STATUS.Closed;\n            IdbHelper.dbConnection.close();\n        }\n        onSuccess();\n    }\n}","export const promise = <T>(callBack: (resolve, reject) => void) => {\n    return new Promise<T>(callBack);\n};","import { IQueryResult, IQueryRequest } from \"./interfaces\";\nimport { Main } from \"./business/main_logic\";\nimport { promise } from \"../helpers/index\";\n\nexport class QueryExecutor {\n    static requestQueue: IQueryRequest[] = [];\n    static tableName = \"LocalStore\";\n    static columnName = \"Key\";\n    static isCodeExecuting = false;\n    static prcoessQuery<T>(request: IQueryRequest) {\n        return promise<T>((resolve, reject) => {\n            request.onSuccess = (result) => {\n                resolve(result);\n            };\n            request.onError = (error) => {\n                if (process.env.NODE_ENV === 'dev') {\n                    console.error(error);\n                }\n                reject(error);\n            };\n            this.requestQueue.push(request);\n            this.executeCode();\n        });\n    }\n\n    static executeCode() {\n        if (!this.isCodeExecuting && this.requestQueue.length > 0) {\n            this.isCodeExecuting = true;\n            const request: IQueryRequest = {\n                name: this.requestQueue[0].name,\n                query: this.requestQueue[0].query\n            } as IQueryRequest;\n            new Main(this.onQueryFinished.bind(this)).checkConnectionAndExecuteLogic(request);\n        }\n    }\n\n    static onQueryFinished(message: IQueryResult) {\n        const finishedRequest: IQueryRequest = this.requestQueue.shift();\n        this.isCodeExecuting = false;\n        if (message.errorOccured) {\n            finishedRequest.onError(message.errorDetails);\n        }\n        else {\n            finishedRequest.onSuccess(message.returnedValue);\n        }\n        this.executeCode();\n    }\n}\n","import { QueryExecutor } from './query_executor';\nimport { IQueryRequest, IError, IInsert } from \"./interfaces\";\n\nexport class KeyStore {\n    /**\n     * Initialize KeyStore\n     * \n     */\n    static init = () => {\n        if (indexedDB) {\n            return QueryExecutor.prcoessQuery({\n                name: 'init_db',\n                query: null\n            } as IQueryRequest);\n        }\n    };\n\n    static close = () => {\n        return QueryExecutor.prcoessQuery({\n            name: 'close_db',\n            query: null\n        } as IQueryRequest);\n    };\n\n    /**\n     * return the value by key\n     * \n     * @param {string} key \n     * @param {(result) => void} onSuccess \n     * @param {(err: IError) => void} [onError=null] \n     * @returns \n     */\n    static get = <T>(key: string) => {\n        return QueryExecutor.prcoessQuery<T>({\n            name: 'get',\n            query: key\n        });\n    };\n\n    /**\n     * insert or update value\n     * \n     * @param {any} key \n     * @param {any} value \n     * @param {(result) => void} [onSuccess] \n     * @param {(err: IError) => void} [onError] \n     * @returns \n     */\n    static set = (key, value) => {\n        const query = {\n            Key: key,\n            Value: value\n        } as IInsert;\n        return QueryExecutor.prcoessQuery({\n            name: 'set',\n            query: query\n        } as IQueryRequest);\n    };\n\n    /**\n     * delete value\n     * \n     * @param {string} key \n     * @param {(result) => void} [onSuccess=null] \n     * @param {(err: IError) => void} [onError=null] \n     * @returns \n     */\n    static remove = (key: string) => {\n        return QueryExecutor.prcoessQuery({\n            name: 'remove',\n            query: key\n        } as IQueryRequest);\n    };\n}\n\n\n","export class Config {\n    static isLogEnabled = false;\n    static isRuningInWorker = false;\n}","import { IError, ERROR_TYPE } from \"../common/index\";\nimport { Config } from \"./config\";\n\nexport class LogHelper implements IError {\n    type: ERROR_TYPE;\n    message: string;\n    private info_: any;\n\n    constructor(type: ERROR_TYPE, info: any = null) {\n        this.type = type;\n        this.info_ = info;\n        this.message = this.getMsg_();\n    }\n\n    throw() {\n        throw this.get();\n    }\n\n    static log(msg) {\n        if (Config.isLogEnabled) {\n            console.log(msg);\n        }\n    }\n\n    logError() {\n        console.error(this.get());\n    }\n\n\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg_() {\n        let errMsg: string;\n        switch (this.type) {\n            case ERROR_TYPE.NotArray:\n                errMsg = \"Supplied value is not an array\";\n                break;\n            case ERROR_TYPE.UndefinedColumn:\n                errMsg = \"Column is undefined in Where\";\n                break;\n            case ERROR_TYPE.UndefinedValue:\n                errMsg = \"Value is undefined in Where\";\n                break;\n            case ERROR_TYPE.UndefinedColumnName:\n                errMsg = \"Column name is undefined '\" + this.info_['TableName'] + \"'\";\n                break;\n            case ERROR_TYPE.UndefinedDbName:\n                errMsg = \"Database name is not supplied\";\n                break;\n            case ERROR_TYPE.UndefinedColumnValue:\n                errMsg = \"Column value is undefined\";\n                break;\n            case ERROR_TYPE.NoValueSupplied:\n                errMsg = \"No value is supplied\";\n                break;\n            case ERROR_TYPE.InvalidOp:\n                errMsg = \"Invalid Op Value '\" + this.info_['Op'] + \"'\";\n                break;\n            case ERROR_TYPE.ColumnNotExist:\n                errMsg = this.info_['isOrder'] ?\n                    `Column '${this.info_['column']}' in order query does not exist` :\n                    `Column '${this.info_['column']}' does not exist`;\n                break;\n            case ERROR_TYPE.EnableSearchOff:\n                errMsg = \"Search is turned off for the Column '\" + this.info_['column'] + \"'\";\n                break;\n            case ERROR_TYPE.NullValue:\n                errMsg = \"Null value is not allowed for column '\" + this.info_['ColumnName'] + \"'\";\n                break;\n            case ERROR_TYPE.WrongDataType:\n                errMsg = \"Supplied value for column '\" + this.info_['column'] +\n                    \"' have wrong data type\";\n                break;\n            case ERROR_TYPE.TableNotExist:\n                errMsg = \"Table '\" + this.info_['tableName'] + \"' does not exist\";\n                break;\n            case ERROR_TYPE.DbNotExist:\n                errMsg = `Database with name ${this.info_['dbName']} does not exist`;\n                break;\n            case ERROR_TYPE.NotObject:\n                errMsg = \"supplied value is not object\";\n                break;\n            case ERROR_TYPE.InvalidOp:\n                errMsg = \"Invalid Config '\" + this.info_['Config'] + \" '\";\n                break;\n            case ERROR_TYPE.DbBlocked:\n                errMsg = `database is blocked, cant be deleted right now`;\n                break;\n            case ERROR_TYPE.NullValueInWhere:\n                errMsg = `Null/undefined is not allowed in where. Column '${this.info_['column']}' has null`;\n                break;\n            case ERROR_TYPE.InvalidJoinQuery:\n                errMsg = this.info_;\n                break;\n            default:\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","import { IdbHelper } from \"./idb_helper\";\nimport { CONNECTION_STATUS, ERROR_TYPE, IError } from \"../../common/index\";\nexport class BaseDb {\n\n    onError: (err: IError) => void;\n    protected get dbName() {\n        return IdbHelper.activeDb.name;\n    }\n\n    protected get dbStatus() {\n        return IdbHelper.dbStatus;\n    }\n\n    protected set dbStatus(value) {\n        IdbHelper.dbStatus = value;\n    }\n\n\n    protected set dbConnection(value) {\n        IdbHelper.dbConnection = value;\n    }\n\n    protected get dbConnection() {\n        return IdbHelper.dbConnection;\n    }\n\n    protected updateDbStatus(status: CONNECTION_STATUS, err?: ERROR_TYPE) {\n        IdbHelper.updateDbStatus(status, err);\n    }\n\n    protected onDbDroppedByBrowser(deleteMetaData?: boolean) {\n        IdbHelper.callDbDroppedByBrowser(deleteMetaData);\n    }\n\n    protected get dbVersion() {\n        return parseInt(IdbHelper.activeDbVersion as any);\n    }\n\n    protected get activeDb() {\n        return IdbHelper.activeDb;\n    }\n\n    protected getDbList() {\n        return IdbHelper.getDbList();\n    }\n\n    protected setDbList(value) {\n        return IdbHelper.setDbList(value);\n    }\n\n\n    protected onDbClose(event) {\n        this.onDbDroppedByBrowser();\n        this.updateDbStatus(CONNECTION_STATUS.Closed, ERROR_TYPE.ConnectionClosed);\n    }\n\n    protected onDbVersionChange(e: IDBVersionChangeEvent) {\n        if (e.newVersion === null) { // An attempt is made to delete the db\n            (e.target as any).close(); // Manually close our connection to the db\n            this.onDbDroppedByBrowser(true);\n            this.updateDbStatus(CONNECTION_STATUS.Closed, ERROR_TYPE.ConnectionClosed);\n        }\n    }\n\n    protected onDbConError(e) {\n        IdbHelper.dbStatus.lastError = (\"Error occured in connection :\" + (e.target as any).result) as any;\n    }\n}","import { IError, CONNECTION_STATUS, ERROR_TYPE } from \"../../common/index\";\nimport { KeyStore } from \"../keystore/index\";\nimport { Table, Column } from \"../model/index\";\nimport { LogHelper } from \"../log_helper\";\nimport { BaseDb } from \"./base_db\";\nimport { promise } from \"../helpers/index\";\n\nexport class DropDb extends BaseDb {\n    private onSuccess_: () => void;\n    private onError_: (err: IError) => void;\n\n    constructor(onSuccess: () => void, onError: (err: IError) => void) {\n        super();\n        this.onSuccess_ = onSuccess;\n        this.onError_ = onError;\n    }\n\n    deleteMetaData() {\n        return promise((res, rej) => {\n            KeyStore.remove(`JsStore_${this.dbName}_Db_Version`);\n            this.activeDb.tables.forEach((table: Table) => {\n                KeyStore.remove(`JsStore_${this.dbName}_${table.name}_Version`);\n                table.columns.forEach((column: Column) => {\n                    if (column.autoIncrement) {\n                        KeyStore.remove(`JsStore_${this.dbName}_${table.name}_${column.name}_Value`);\n                    }\n                });\n            });\n            // remove from database_list \n            this.getDbList().then(dbList => {\n                dbList.splice(dbList.indexOf(this.dbName), 1);\n                this.setDbList(dbList).then(() => {\n                    // remove db schema from keystore\n                    KeyStore.remove(`JsStore_${this.dbName}_Schema`).\n                        then(res).catch(rej);\n                });\n            });\n        });\n    }\n\n    deleteDb() {\n        setTimeout(() => {\n            const dropDbRequest = indexedDB.deleteDatabase(this.dbName);\n            dropDbRequest.onblocked = () => {\n                if (this.onError_ != null) {\n                    this.onError_(new LogHelper(ERROR_TYPE.DbBlocked).get());\n                }\n            };\n            dropDbRequest.onerror = (e) => {\n                if (this.onError_ != null) {\n                    this.onError_((event as any).target.error);\n                }\n            };\n            dropDbRequest.onsuccess = () => {\n                this.deleteMetaData().then(() => {\n                    this.onSuccess_();\n                    this.dbStatus.conStatus = CONNECTION_STATUS.Closed;\n                }).catch(this.onError_);\n            };\n        }, 100);\n    }\n}\n","import { CONNECTION_STATUS, ERROR_TYPE, IDB_MODE, IDbStatus } from \"../../common/index\";\nimport { KeyStore } from \"../keystore/index\";\nimport { DataBase } from \"../model/index\";\nimport { DropDb } from \"./drop_db\";\nimport { promise } from \"../helpers/index\";\n\nexport class IdbHelper {\n\n    static onDbDroppedByBrowser: () => void;\n    static transaction: IDBTransaction = null;\n    static isDbDeletedByBrowser: boolean;\n    static dbConnection: IDBDatabase;\n    static activeDb: DataBase;\n    static activeDbVersion = 0;\n    static dbStatus: IDbStatus = {\n        conStatus: CONNECTION_STATUS.NotStarted\n    };\n\n    static callDbDroppedByBrowser(deleteMetaData?: boolean) {\n        if (IdbHelper.dbStatus.conStatus === CONNECTION_STATUS.Connected) {\n            IdbHelper.isDbDeletedByBrowser = true;\n            if (deleteMetaData === true) {\n                const dropDbObject = new DropDb(function () {\n\n                }, function () {\n\n                });\n                dropDbObject.deleteMetaData();\n            }\n        }\n    }\n\n    static createTransaction(tableNames: string[], callBack: () => void, mode?) {\n        if (IdbHelper.transaction === null) {\n            mode = mode ? mode : IDB_MODE.ReadWrite;\n            IdbHelper.transaction = IdbHelper.dbConnection.transaction(tableNames, mode);\n            const onComplete = () => {\n                IdbHelper.transaction = null;\n                callBack();\n            };\n            IdbHelper.transaction.oncomplete = onComplete;\n            IdbHelper.transaction.onabort = onComplete;\n        }\n    }\n\n    static setDbList(list: string[]) {\n        return KeyStore.set('DataBase_List', list);\n    }\n\n    static updateDbStatus(status: CONNECTION_STATUS, err?: ERROR_TYPE) {\n        if (err === undefined) {\n            IdbHelper.dbStatus.conStatus = status;\n        }\n        else {\n            IdbHelper.dbStatus = {\n                conStatus: status,\n                lastError: err\n            };\n        }\n    }\n\n    static getDbList() {\n        return promise<string[]>((res, rej) => {\n            KeyStore.get<string[]>('DataBase_List').then(result => {\n                res(result == null ? [] : result);\n            }).catch(rej);\n        });\n    }\n\n    static getDbVersion(dbName: string) {\n        return promise<number>((res, rej) => {\n            KeyStore.get(`JsStore_${dbName}_Db_Version`).then(dbVersion => {\n                res(Number(dbVersion));\n            }).catch(rej);\n        });\n    }\n\n    static getDbSchema(dbName: string) {\n        return KeyStore.get<DataBase>(`JsStore_${dbName}_Schema`);\n    }\n\n    static getTable(tableName: string) {\n        const currentTable = IdbHelper.activeDb.tables.find(table => table.name === tableName);\n        return currentTable;\n    }\n}","export const isNull = (value) => {\n    if (value == null) {\n        return true;\n    } else {\n        switch (typeof value) {\n            case 'string': return value.length === 0;\n            case 'number': return isNaN(value);\n        }\n    }\n    return false;\n};","import { DATA_TYPE } from \"../../common/index\";\n\nexport const getDataType = (value) => {\n    if (value == null) {\n        return DATA_TYPE.Null;\n    }\n    const type = typeof value;\n    switch (type) {\n        case 'object':\n            if (Array.isArray(value)) {\n                return DATA_TYPE.Array;\n            }\n            if (value instanceof Date) {\n                return DATA_TYPE.DateTime;\n            }\n        default:\n            return type;\n    }\n}","import { Table } from \"../../model/table\";\nimport { Column } from \"../../model/column\";\nimport { LogHelper } from \"../../log_helper\";\nimport { isNull, getDataType } from \"../../utils/index\";\nimport { DATA_TYPE, ERROR_TYPE } from \"../../../common/index\";\n\nexport class SchemaChecker {\n    table: Table;\n    constructor(table: Table) {\n        this.table = table;\n    }\n\n    check(setValue: object, tblName: string) {\n        let log: LogHelper = null;\n        if (typeof setValue === DATA_TYPE.Object) {\n            if (this.table) {\n                // loop through table column and find data is valid\n                this.table.columns.every((column: Column) => {\n                    if (log === null) {\n                        if (column.name in setValue) {\n                            log = this.checkByColumn_(column, setValue[column.name]);\n                        }\n                        return true;\n                    }\n                    else {\n                        return false;\n                    }\n                });\n            }\n            else {\n                log = new LogHelper(ERROR_TYPE.TableNotExist, { tableName: tblName });\n            }\n        }\n        else {\n            log = new LogHelper(ERROR_TYPE.NotObject);\n        }\n        if (log != null) {\n            return log.get();\n        }\n        return null;\n    }\n\n\n\n    private checkByColumn_(column: Column, value) {\n        let log: LogHelper = null;\n        // check not null schema\n        if (column.notNull === true && isNull(value)) {\n            log = new LogHelper(ERROR_TYPE.NullValue, { ColumnName: column.name });\n        }\n\n        // check datatype\n        const type = getDataType(value);\n        const checkFurther = value != null;\n        if (column.dataType && checkFurther) {\n            if (type !== column.dataType && type !== 'object') {\n                log = new LogHelper(ERROR_TYPE.WrongDataType, { column: column.name });\n            }\n        }\n\n        // check allowed operators\n        if (checkFurther && type === 'object') {\n            const allowedOp = ['+', '-', '*', '/', '{push}'];\n            for (const prop in value) {\n                if (allowedOp.indexOf(prop) < 0 && column.dataType && type !== column.dataType) {\n                    log = new LogHelper(ERROR_TYPE.WrongDataType, { column: column.name });\n                }\n                break;\n            }\n        }\n        return log;\n    }\n}","import { Table, Column } from \"../../model/index\";\nimport { ERROR_TYPE, DATA_TYPE } from \"../../../common/index\";\nimport { LogHelper } from \"../../log_helper\";\nimport { isNull, getDataType } from \"../../utils/index\";\n\nexport class ValueChecker {\n    table: Table;\n    value: object;\n    errorOccured = false;\n    log: LogHelper;\n    autoIncrementValue = {};\n\n    constructor(table: Table, autoIncrementValue) {\n        this.table = table;\n        this.autoIncrementValue = autoIncrementValue;\n    }\n\n    checkAndModifyValue(value) {\n        this.value = value;\n        this.table.columns.every((column) => {\n            this.checkAndModifyColumnValue_(column);\n            return !this.errorOccured;\n        });\n        return this.errorOccured;\n    }\n\n    private checkNotNullAndDataType_(column: Column) {\n        // check not null schema\n        if (column.notNull && isNull(this.value[column.name])) {\n            this.onValidationError_(ERROR_TYPE.NullValue, { ColumnName: column.name });\n        }\n        // check datatype\n        else if (column.dataType && !isNull(this.value[column.name]) &&\n            getDataType(this.value[column.name]) !== column.dataType) {\n            this.onValidationError_(ERROR_TYPE.WrongDataType, { column: column.name });\n        }\n    }\n\n    private checkAndModifyColumnValue_(column: Column) {\n        const columnValue = this.value[column.name];\n        // check auto increment scheme\n        if (column.autoIncrement) {\n            // if value is null, then create the autoincrement value\n            if (isNull(columnValue)) {\n                this.value[column.name] = ++this.autoIncrementValue[column.name];\n            }\n            else {\n                if (getDataType(columnValue) === DATA_TYPE.Number) {\n                    // if column value is greater than autoincrement value saved, then make the\n                    // column value as autoIncrement value\n                    if (columnValue > this.autoIncrementValue[column.name]) {\n                        this.autoIncrementValue[column.name] = columnValue;\n                    }\n                }\n            }\n        }\n        // check Default Schema\n        else if (column.default !== undefined && isNull(columnValue)) {\n            this.value[column.name] = column.default;\n        }\n        this.checkNotNullAndDataType_(column);\n    }\n\n    private onValidationError_(error: ERROR_TYPE, details: object) {\n        this.errorOccured = true;\n        this.log = new LogHelper(error, details);\n    }\n}","export const promiseAll = <T>(promises: any) => {\n    return Promise.all<T>(promises);\n};","import { Table } from \"../model/index\";\nimport { IdbHelper, QueryHelper } from \"../business/index\";\nimport { KeyStore } from \"../keystore/index\";\nimport { promiseAll, promise } from \"../helpers/index\";\nimport { QueryExecutor } from \"../query_executor\";\n\nexport const getAutoIncrementValues = (table: Table): Promise<{ [columnName: string]: number }> => {\n\n    const autoIncColumns = table.columns.filter((col) => {\n        return col.autoIncrement;\n    });\n    return promise((resolve, reject) => {\n        promiseAll(autoIncColumns.map(column => {\n            const autoIncrementKey = `JsStore_${IdbHelper.activeDb.name}_${table.name}_${column.name}_Value`;\n            return KeyStore.get(autoIncrementKey);\n        })).then(results => {\n            const autoIncValues = {};\n            for (let i = 0; i < autoIncColumns.length; i++) {\n                autoIncValues[autoIncColumns[i].name] = results[i];\n            }\n            resolve(autoIncValues);\n        }).catch(reject);\n    });\n};\n\nexport const setAutoIncrementValue = (table: Table, autoIncrementValue: object) => {\n    const keys = Object.keys(autoIncrementValue);\n    return promiseAll(keys.map((columnName) => {\n        const autoIncrementKey = `JsStore_${IdbHelper.activeDb.name}_${table.name}_${columnName}_Value`;\n        const value = autoIncrementValue[columnName];\n        if (QueryExecutor.isTransactionQuery === true) {\n            QueryHelper.autoIncrementValues[table.name][columnName] = value;\n        }\n        return KeyStore.set(\n            autoIncrementKey,\n            value\n        );\n    }));\n};","import { Table } from \"../../model/index\";\nimport { ValueChecker } from \"./value_checker\";\nimport { promise, getAutoIncrementValues, setAutoIncrementValue } from \"../../helpers/index\";\nimport { QueryExecutor } from \"../../query_executor\";\nimport { QueryHelper } from \"../query_helper\";\n\nexport class ValuesChecker {\n    table: Table;\n    values: object[];\n    valueCheckerObj: ValueChecker;\n\n    constructor(table: Table, values: object[]) {\n        this.table = table;\n        this.values = values;\n    }\n\n    checkAndModifyValues() {\n        return promise((resolve, reject) => {\n            const onAutoIncValueEvaluated = (autoIncrementValues) => {\n                this.valueCheckerObj = new ValueChecker(this.table, autoIncrementValues);\n                this.startChecking().then(resolve).catch(reject);\n            };\n            if (QueryExecutor.isTransactionQuery === false) {\n                getAutoIncrementValues(this.table).then(autoIncValues => {\n                    onAutoIncValueEvaluated(autoIncValues);\n                }).catch(reject);\n            }\n            else {\n                onAutoIncValueEvaluated(QueryHelper.autoIncrementValues[this.table.name]);\n            }\n        });\n    }\n    \n    private startChecking() {\n        return promise((resolve, reject) => {\n            let isError = false;\n            this.values.every((item) => {\n                isError = this.valueCheckerObj.checkAndModifyValue(item);\n                return !isError;\n            });\n            if (isError) {\n                const error = this.valueCheckerObj.log.get();\n                reject(error);\n            }\n            const promiseObj = setAutoIncrementValue(this.table, this.valueCheckerObj.autoIncrementValue);\n            if (QueryExecutor.isTransactionQuery === false) {\n                promiseObj.then(resolve).catch(reject);\n            }\n            else {\n                resolve();\n            }\n        });\n    }\n}","import { API, ERROR_TYPE, QUERY_OPTION, DATA_TYPE, InsertQuery, IError } from \"../../common/index\";\nimport { IdbHelper } from \"./idb_helper\";\nimport { LogHelper } from \"../log_helper\";\nimport * as Update from \"./update/index\";\nimport * as Insert from \"./insert/index\";\nimport { Table } from \"../model/index\";\nimport { promise } from \"../helpers/index\";\nimport { getDataType } from \"../utils/index\";\n\nexport class QueryHelper {\n    api: API;\n    query;\n    error: IError;\n    isTransaction = false;\n    static autoIncrementValues: { [table: string]: { [columnName: string]: number } } = {};\n\n    constructor(api: API, query: any) {\n        this.api = api;\n        this.query = query;\n    }\n    checkAndModify() {\n        return promise((resolve, reject) => {\n            const resolveReject = () => {\n                if (this.error == null) {\n                    resolve();\n                }\n                else {\n                    reject(this.error);\n                }\n            };\n            switch (this.api) {\n                case API.Select:\n                case API.Remove:\n                case API.Count:\n                    this.checkFetchQuery_();\n                    resolveReject();\n                    break;\n                case API.Insert:\n                    this.checkInsertQuery_().then(resolveReject).\n                        catch((err) => {\n                            this.error = err;\n                            resolveReject();\n                        });\n                    break;\n                case API.Update:\n                    this.checkUpdateQuery_();\n                    resolveReject();\n                    break;\n            }\n        });\n    }\n\n    private isInsertQryValid_(callBack: (tbl: Table) => void) {\n        const table = this.getTable_((this.query as InsertQuery).into);\n        let log: LogHelper;\n        if (table) {\n            switch (getDataType(this.query.values)) {\n                case DATA_TYPE.Array:\n                    break;\n                case DATA_TYPE.Null:\n                    log = new LogHelper(ERROR_TYPE.NoValueSupplied);\n                    break;\n                default:\n                    log = new LogHelper(ERROR_TYPE.NotArray);\n            }\n        }\n        else {\n            log = new LogHelper(ERROR_TYPE.TableNotExist, { tableName: (this.query as InsertQuery).into });\n        }\n        callBack(table);\n        return log == null ? null : log.get();\n    }\n\n    private checkInsertQuery_() {\n        return promise((resolve, reject) => {\n            let table;\n            const err = this.isInsertQryValid_((tbl) => {\n                table = tbl;\n            });\n            if (err == null) {\n                if (this.query.skipDataCheck === true) {\n                    resolve();\n                }\n                else {\n                    const valueCheckerInstance = new Insert.ValuesChecker(table, this.query.values);\n                    valueCheckerInstance.checkAndModifyValues().then(() => {\n                        (this.query as InsertQuery).values = valueCheckerInstance.values;\n                        resolve();\n                    }).catch(reject);\n                }\n            }\n            else {\n                reject(err);\n            }\n        });\n    }\n\n    private checkUpdateQuery_() {\n        this.error = new Update.SchemaChecker(this.getTable_(this.query.in)).\n            check(this.query.set, this.query.in);\n        if (this.error == null) {\n            if (this.query.where != null) {\n                this.checkForNullInWhere_();\n                if (this.error == null) {\n                    this.addGreatAndLessToNotOp_();\n                }\n            }\n        }\n    }\n\n    private checkForNullInWhere_() {\n        for (const key in this.query.where) {\n            if (this.query.where[key] == null) {\n                this.error = new LogHelper(ERROR_TYPE.NullValueInWhere, { column: key }).get();\n                return;\n            }\n        }\n    }\n\n    private checkFetchQuery_() {\n        if (this.isTableExist_(this.query.from) === true) {\n            if (this.query.where != null) {\n                this.checkForNullInWhere_();\n                if (this.error == null) {\n                    this.addGreatAndLessToNotOp_();\n                }\n            }\n\n        }\n        else {\n            this.error = new LogHelper(ERROR_TYPE.TableNotExist, { tableName: this.query.from }).get();\n        }\n    }\n\n    private isTableExist_(tableName: string): boolean {\n        const index = this.activeDb_.tables.findIndex(table => table.name === tableName);\n        return index >= 0;\n    }\n\n    private get activeDb_() {\n        return IdbHelper.activeDb;\n    }\n\n    private getTable_(tableName: string) {\n        return IdbHelper.getTable(tableName);\n    }\n\n    private addGreatAndLessToNotOp_() {\n        const whereQuery = this.query.where;\n        const containsNot = (qry: object, keys: string[]) => {\n            return keys.findIndex(key => qry[key][QUERY_OPTION.NotEqualTo] != null) >= 0;\n        };\n        const addToSingleQry = (qry, keys: string[]) => {\n            let value;\n            keys.forEach((prop) => {\n                value = qry[prop];\n                if (value[QUERY_OPTION.NotEqualTo] != null) {\n                    qry[prop][QUERY_OPTION.GreaterThan] = value[QUERY_OPTION.NotEqualTo];\n                    if (qry[QUERY_OPTION.Or] === undefined) {\n                        qry[QUERY_OPTION.Or] = {};\n                        qry[QUERY_OPTION.Or][prop] = {};\n                    }\n                    else if (qry[QUERY_OPTION.Or][prop] === undefined) {\n                        qry[QUERY_OPTION.Or][prop] = {};\n                    }\n                    qry[QUERY_OPTION.Or][prop][QUERY_OPTION.LessThan] = value[QUERY_OPTION.NotEqualTo];\n                    delete qry[prop][QUERY_OPTION.NotEqualTo];\n                }\n            });\n            return qry;\n        };\n        switch (getDataType(whereQuery)) {\n            case DATA_TYPE.Object:\n                const queryKeys = Object.keys(whereQuery);\n                if (containsNot(whereQuery, queryKeys)) {\n                    if (queryKeys.length === 1) {\n                        this.query.where = addToSingleQry(whereQuery, queryKeys);\n                    }\n                    else {\n                        const whereTmpQry = [];\n                        queryKeys.forEach((prop) => {\n                            whereTmpQry.push(addToSingleQry({ [prop]: whereQuery[prop] }, [prop]));\n                        });\n                        this.query.where = whereTmpQry;\n                    }\n                }\n                break;\n            default:\n                const whereTmp = [];\n                (whereQuery as object[]).forEach(qry => {\n                    const qryKeys = Object.keys(qry);\n                    if (containsNot(qry, qryKeys)) {\n                        qry = addToSingleQry(qry, qryKeys);\n                    }\n                    whereTmp.push(qry);\n                });\n                this.query.where = whereTmp;\n        }\n    }\n\n\n\n}","import { IdbHelper } from \"./idb_helper\";\nimport { QUERY_OPTION } from \"../../common/index\";\nimport { DataBase } from \"../model/index\";\n\nexport class BaseHelper {\n\n\n    regexExpression: RegExp;\n    //   method helpers\n\n    protected get activeDb(): DataBase {\n        return IdbHelper.activeDb;\n    }\n\n    protected get dbConnection() {\n        return IdbHelper.dbConnection;\n    }\n\n    protected get transaction() {\n        return IdbHelper.transaction;\n    }\n\n    protected createTransaction(tableNames: string[], callBack: () => void, mode?) {\n        IdbHelper.createTransaction(tableNames, callBack, mode);\n    }\n\n    protected regexTest(value) {\n        return this.regexExpression.test(value);\n    }\n\n    protected isTableExist(tableName: string): boolean {\n        const index = this.activeDb.tables.findIndex(table => table.name === tableName);\n        return index >= 0;\n    }\n\n    protected getTable(tableName: string) {\n        return IdbHelper.getTable(tableName);\n    }\n\n    protected getKeyRange(value, op?) {\n        let keyRange: IDBKeyRange;\n        switch (op) {\n            case QUERY_OPTION.Between: keyRange = IDBKeyRange.bound(value.low, value.high, false, false); break;\n            case QUERY_OPTION.GreaterThan: keyRange = IDBKeyRange.lowerBound(value, true); break;\n            case QUERY_OPTION.GreaterThanEqualTo: keyRange = IDBKeyRange.lowerBound(value); break;\n            case QUERY_OPTION.LessThan: keyRange = IDBKeyRange.upperBound(value, true); break;\n            case QUERY_OPTION.LessThanEqualTo: keyRange = IDBKeyRange.upperBound(value); break;\n            default: keyRange = IDBKeyRange.only(value); break;\n        }\n        return keyRange;\n    }\n\n    protected getPrimaryKey(tableName): string {\n        const primaryKey: string = this.getTable(tableName).primaryKey;\n        return primaryKey ? primaryKey : this.getKeyPath(tableName);\n    }\n\n    protected getKeyPath(tableName) {\n        const transaction: IDBTransaction = this.dbConnection.transaction([tableName], \"readonly\"),\n            objectStore = transaction.objectStore(tableName);\n        return objectStore.keyPath as string;\n    }\n}","import { OCCURENCE } from \"../../common/index\";\n\nexport const getRegexFromLikeExpression = (likeExpression: string) => {\n    const filterValues = likeExpression.split('%');\n    let filterValue: string;\n    let occurence: OCCURENCE;\n    if (filterValues[1]) {\n        filterValue = filterValues[1];\n        occurence = filterValues.length > 2 ? OCCURENCE.Any : OCCURENCE.Last;\n    }\n    else {\n        filterValue = filterValues[0];\n        occurence = OCCURENCE.First;\n    }\n    switch (occurence) {\n        case OCCURENCE.First:\n            return new RegExp(`^${filterValue}`, 'i');\n        case OCCURENCE.Last:\n            return new RegExp(`${filterValue}$`, 'i');\n        default:\n            return new RegExp(`${filterValue}`, 'i');\n    }\n}","import { OCCURENCE, QUERY_OPTION } from \"../../common/index\";\nimport { getRegexFromLikeExpression, getDataType } from \"../utils/index\";\n\n/**\n * For matching the different column value existance for where option\n * \n * @export\n * @class WhereChecker\n */\nexport class WhereChecker {\n  where: object;\n  status: boolean;\n  checkFlag: boolean;\n\n  constructor(where: object, checkFlag: boolean) {\n    this.where = where;\n    this.checkFlag = checkFlag;\n  }\n\n  check(rowValue) {\n    this.status = true;\n    if (this.checkFlag === true) {\n      for (const columnName in this.where) {\n        if (!this.status) {\n          break;\n        }\n        const columnValue = this.where[columnName];\n        if (getDataType(columnValue) === 'object') {\n          for (const key in columnValue) {\n            if (!this.status) {\n              break;\n            }\n            switch (key) {\n              case QUERY_OPTION.In:\n                this.status = this.checkIn(columnName, rowValue[columnName]); break;\n              case QUERY_OPTION.Like:\n                this.status = this.checkLike_(columnName, rowValue[columnName]); break;\n              case QUERY_OPTION.Regex:\n                this.checkRegex(columnName, rowValue[columnName]); break;\n              case QUERY_OPTION.Between:\n              case QUERY_OPTION.GreaterThan:\n              case QUERY_OPTION.LessThan:\n              case QUERY_OPTION.GreaterThanEqualTo:\n              case QUERY_OPTION.LessThanEqualTo:\n              case QUERY_OPTION.NotEqualTo:\n                this.status = this.checkComparisionOp_(columnName, rowValue[columnName], key);\n                break;\n              default:\n                this.status = false;\n            }\n          }\n        }\n        else {\n          this.status = columnValue === rowValue[columnName];\n        }\n      }\n    }\n    return this.status;\n  }\n\n  private checkIn(column, value) {\n    return (this.where[column][QUERY_OPTION.In] as any[]).find(val => val === value) != null;\n  }\n\n  private checkLike_(column, value) {\n    return getRegexFromLikeExpression(this.where[column][QUERY_OPTION.Like]).test(value);\n  }\n\n  private checkRegex(column, value) {\n    const expr = this.where[column][QUERY_OPTION.Regex];\n    this.status = expr.test(value);\n  }\n\n  private checkComparisionOp_(column, value, symbol) {\n    const compareValue = this.where[column][symbol];\n    switch (symbol) {\n      // greater than\n      case QUERY_OPTION.GreaterThan:\n        return value > compareValue;\n      // less than\n      case QUERY_OPTION.LessThan:\n        return value < compareValue;\n      // less than equal\n      case QUERY_OPTION.LessThanEqualTo:\n        return value <= compareValue;\n      // greather than equal\n      case QUERY_OPTION.GreaterThanEqualTo:\n        return value >= compareValue;\n      // between\n      case QUERY_OPTION.Between:\n        return value > compareValue.low && value < compareValue.high;\n      // Not equal to\n      case QUERY_OPTION.NotEqualTo:\n        return value !== compareValue;\n    }\n  }\n}","export const getObjectFirstKey = (value) => {\n    for (const key in value) {\n        return key;\n    }\n    return null;\n};","import { BaseHelper } from \"./base_helper\";\nimport { IError, ERROR_TYPE, OCCURENCE, DATA_TYPE, QUERY_OPTION } from \"../../common/index\";\nimport { WhereChecker } from \"./where_checker\";\nimport { LogHelper } from \"../log_helper\";\nimport { Column } from \"../model/index\";\nimport { getDataType, getObjectFirstKey, getRegexFromLikeExpression } from \"../utils/index\";\n\nexport abstract class Base extends BaseHelper {\n    error: IError;\n    rowAffected = 0;\n    onSuccess: (result?) => void;\n    onError: (err: IError) => void;\n    objectStore: IDBObjectStore;\n    query;\n    whereCheckerInstance: WhereChecker;\n    tableName: string;\n    isTransaction: boolean;\n\n    skipRecord;\n    limitRecord;\n\n    protected onErrorOccured(e, customError = false) {\n        if (customError) {\n            e.logError();\n            this.error = (e as LogHelper).get();\n        }\n        else {\n            let error;\n            if (e.name) {\n                error = new LogHelper((e.name));\n                error.message = e.message;\n            }\n            else {\n                error = new LogHelper((e as any).target.error.name);\n                error.message = (e as any).target.error.message;\n            }\n            if (process.env.NODE_ENV === 'dev') {\n                error.logError();\n            }\n            this.error = error.get();\n        }\n    }\n\n    protected onExceptionOccured(ex: DOMException) {\n        console.error(ex);\n        this.onError({\n            message: ex.message,\n            type: ERROR_TYPE.InvalidQuery\n        });\n    }\n\n    protected getColumnInfo(columnName: string, tableName: string) {\n        return this.getTable(tableName).columns.find(column => column.name === columnName);\n    }\n\n    protected goToWhereLogic() {\n        const columnName = getObjectFirstKey(this.query.where);\n        if (this.objectStore.indexNames.contains(columnName)) {\n            const value = this.query.where[columnName];\n            if (getDataType(value) === 'object') {\n                const checkFlag = Boolean(\n                    Object.keys(value).length > 1 ||\n                    Object.keys(this.query.where).length > 1\n                );\n                this.whereCheckerInstance = new WhereChecker(this.query.where, checkFlag);\n                const key = getObjectFirstKey(value);\n                switch (key) {\n                    case QUERY_OPTION.Like: {\n                        const regexVal = getRegexFromLikeExpression(value[QUERY_OPTION.Like]);\n                        (this as any).executeRegexLogic(columnName, regexVal);\n                    } break;\n                    case QUERY_OPTION.Regex:\n                        (this as any).executeRegexLogic(columnName, value[QUERY_OPTION.Regex]);\n                        break;\n                    case QUERY_OPTION.In:\n                        (this as any).executeInLogic(columnName, value[QUERY_OPTION.In]);\n                        break;\n                    case QUERY_OPTION.Between:\n                    case QUERY_OPTION.GreaterThan:\n                    case QUERY_OPTION.LessThan:\n                    case QUERY_OPTION.GreaterThanEqualTo:\n                    case QUERY_OPTION.LessThanEqualTo:\n                        (this as any).executeWhereLogic(columnName, value, key, \"next\");\n                        break;\n                    case QUERY_OPTION.Aggregate: break;\n                    default: (this as any).executeWhereLogic(columnName, value, null, \"next\");\n                }\n            }\n            else {\n                const checkFlag = Boolean(Object.keys(this.query.where).length > 1);\n                this.whereCheckerInstance = new WhereChecker(this.query.where, checkFlag);\n                (this as any).executeWhereLogic(columnName, value, null, \"next\");\n            }\n        }\n        else {\n            const column: Column = this.getColumnInfo(columnName, this.tableName);\n            const error = column == null ?\n                new LogHelper(ERROR_TYPE.ColumnNotExist, { column: columnName }) :\n                new LogHelper(ERROR_TYPE.EnableSearchOff, { column: columnName });\n\n            this.onErrorOccured(error, true);\n        }\n    }\n}","import { Base } from \"./base\";\nimport { IError } from \"../../common/index\";\nimport { Column } from \"../model/index\";\nimport { KeyStore } from \"../keystore/index\";\n\nexport class Clear extends Base {\n    constructor(tableName: string, onSuccess: () => void, onError: (err: IError) => void) {\n        super();\n        this.query = tableName;\n        this.onSuccess = onSuccess;\n        this.onError = onError;\n    }\n\n    execute() {\n        this.createTransaction([this.query], () => {\n            if (this.error == null) {\n                this.onSuccess();\n            }\n            else {\n                this.onError(this.error);\n            }\n        });\n        const clearRequest: IDBRequest = this.transaction.objectStore(this.query).clear();\n        clearRequest.onsuccess = (e) => {\n            const currentTable = this.getTable(this.query);\n            currentTable.columns.forEach((column: Column) => {\n                if (column.autoIncrement) {\n                    KeyStore.set(`JsStore_${this.activeDb.name}_${this.query}_${column.name}_Value`, 0);\n                }\n            });\n        };\n\n        clearRequest.onerror = this.onErrorOccured;\n    }\n}","import { TableHelper, Column } from \"../model/index\";\nimport { IError, CONNECTION_STATUS } from \"../../common/index\";\nimport { KeyStore } from \"../keystore/index\";\nimport { BaseDb } from \"./base_db\";\nimport { promise } from \"../helpers/index\";\n\nexport class InitDb extends BaseDb {\n    onSuccess: (isDbCreated: boolean) => void;\n\n    constructor(onSuccess: (isDbCreated: boolean) => void, onError: (err: IError) => void) {\n        super();\n        this.onSuccess = onSuccess;\n        this.onError = onError;\n    }\n\n    execute(tablesMetaData: TableHelper[]) {\n        const listofTableCreated = [];\n        const dbRequest = indexedDB.open(this.dbName, this.dbVersion);\n        let isDbCreated = false;\n        dbRequest.onerror = (event) => {\n            if (this.onError != null) {\n                this.onError((event as any).target.error);\n            }\n        };\n\n        dbRequest.onsuccess = (event) => {\n            this.dbStatus.conStatus = CONNECTION_STATUS.Connected;\n            this.dbConnection = dbRequest.result;\n            (this.dbConnection as any).onclose = this.onDbClose.bind(this);\n\n            this.dbConnection.onversionchange = this.onDbVersionChange.bind(this);\n            this.dbConnection.onerror = this.onDbConError.bind(this);\n\n            if (isDbCreated) {\n                // save in database list\n                this.savedbNameIntoDbList_().then(() => {\n                    if (this.onSuccess != null) {\n                        this.onSuccess(isDbCreated);\n                    }\n                });\n            }\n            else {\n                this.setPrimaryKey_();\n                this.onSuccess(isDbCreated);\n            }\n        };\n\n        dbRequest.onupgradeneeded = (event) => {\n            isDbCreated = true;\n            const dbConnection = (event as any).target.result;\n            const createObjectStore = (item: TableHelper, index) => {\n                try {\n                    let store: IDBObjectStore;\n                    if (item.primaryKey.length > 0) {\n                        this.activeDb.tables[index].primaryKey = item.primaryKey;\n                        store = dbConnection.createObjectStore(item.name, {\n                            keyPath: item.primaryKey\n                        });\n                    }\n                    else {\n                        store = dbConnection.createObjectStore(item.name, {\n                            autoIncrement: true\n                        });\n                    }\n                    item.columns.forEach((column: Column) => {\n                        if (column.enableSearch === true) {\n                            const options = column.primaryKey ? { unique: true } : { unique: column.unique };\n                            options['multiEntry'] = column.multiEntry;\n                            const keyPath = column.keyPath == null ? column.name : column.keyPath;\n                            store.createIndex(column.name, keyPath, options);\n                            if (column.autoIncrement) {\n                                KeyStore.set(`JsStore_${this.dbName}_${item.name}_${column.name}_Value`, 0);\n                            }\n                        }\n                    });\n                    listofTableCreated.push(item.name);\n                    // setting the table version\n                    KeyStore.set(`JsStore_${this.dbName}_${item.name}_Version`, item.version);\n                }\n                catch (e) {\n                    console.error(e);\n                }\n            };\n            tablesMetaData.forEach((item: TableHelper, index) => {\n                if (item.requireDelete) {\n                    // Delete the old datastore.    \n                    if (dbConnection.objectStoreNames.contains(item.name)) {\n                        dbConnection.deleteObjectStore(item.name);\n                    }\n                    createObjectStore(item, index);\n                }\n                else if (item.requireCreation) {\n                    createObjectStore(item, index);\n                }\n            });\n        };\n    }\n\n    private savedbNameIntoDbList_() {\n        return promise((res, rej) => {\n            this.getDbList().then(dbList => {\n                if (dbList.indexOf(this.dbName) < 0) {\n                    dbList.push(this.dbName);\n                    this.setDbList(dbList).then(res).catch(rej);\n                }\n                else {\n                    res();\n                }\n            }).catch(rej);\n        });\n    }\n\n    private setPrimaryKey_() {\n        this.activeDb.tables.forEach((table, index) => {\n            table.columns.every(item => {\n                this.activeDb.tables[index].primaryKey = item.primaryKey ? item.name : \"\";\n                return !item.primaryKey;\n            });\n        });\n    }\n}\n","import { Base } from \"./base\";\n\nexport class WhereBase extends Base {\n    protected results: any[] = [];\n\n    protected onQueryFinished() {\n        // virtual\n    }\n}","import { QUERY_OPTION, CaseOption } from \"../../../common/index\";\n\nexport class ThenEvaluator {\n    private columnName_: string;\n    private value;\n    private caseQuery_: { [columnName: string]: [CaseOption] };\n    private caseColumnQuery_: CaseOption[];\n    private length_: number;\n\n    setCaseAndValue(caseQuery: any, value) {\n        this.caseQuery_ = caseQuery;\n        this.setValue(value);\n    }\n\n    setCaseAndColumn(caseQuery: { [columnName: string]: [CaseOption] }, columnName: string) {\n        this.caseQuery_ = caseQuery;\n        this.setColumn(columnName);\n        return this;\n    }\n\n    setColumn(columnName: string) {\n        this.columnName_ = columnName;\n        this.caseColumnQuery_ = this.caseQuery_[this.columnName_];\n        this.length_ = this.caseColumnQuery_.length;\n        return this;\n    }\n\n    setValue(value) {\n        this.value = value;\n        return this;\n    }\n\n    evaluate() {\n        for (let i = 0; i < this.length_; i++) {\n            if (this.checkCase_(this.caseColumnQuery_[i]) === true) {\n                return this.caseColumnQuery_[i].then;\n            }\n        }\n        const lastThen = this.caseColumnQuery_[this.length_ - 1].then;\n        return lastThen == null ? this.value[this.columnName_] : lastThen;\n    }\n\n    private checkCase_(cond: CaseOption) {\n        let queryOption;\n        for (queryOption in cond) {\n            switch (queryOption) {\n                case QUERY_OPTION.GreaterThan:\n                    if (this.value[this.columnName_] > cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.Equal:\n                    if (this.value[this.columnName_] === cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.LessThan:\n                    if (this.value[this.columnName_] < cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.GreaterThanEqualTo:\n                    if (this.value[this.columnName_] >= cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.LessThanEqualTo:\n                    if (this.value[this.columnName_] <= cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.NotEqualTo:\n                    if (this.value[this.columnName_] !== cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.Between:\n                    if (this.value[this.columnName_] > cond[queryOption].low && this.value[this.columnName_] < cond[queryOption].high) {\n                        return true;\n                    } break;\n            }\n            return false;\n        }\n    }\n}","import { WhereBase } from \"../where_base\";\nimport { SelectQuery, CaseOption, QUERY_OPTION } from \"../../../common/index\";\nimport { ThenEvaluator } from \"./then_evaluator\";\n\n\nexport class BaseSelect extends WhereBase {\n    sorted = false;\n    isOr: boolean;\n    isArrayQry: boolean;\n    onWhereArrayQrySuccess: () => void;\n    query: SelectQuery;\n    orInfo: {\n        results?: any[];\n        orQuery: object\n    };\n\n    isSubQuery = false;\n\n    shouldEvaluateLimitAtEnd = false;\n    shouldEvaluateSkipAtEnd = false;\n\n    protected pushResult: (value) => void;\n\n    protected thenEvaluator = new ThenEvaluator();\n\n    protected setPushResult() {\n        if (this.query.case) {\n            this.pushResult = (value) => {\n                let columnName: string;\n                this.thenEvaluator.setCaseAndValue(this.query.case, value);\n                for (columnName in this.query.case) {\n                    value[columnName] = this.thenEvaluator.setColumn(columnName).evaluate();\n                }\n                this.results.push(value);\n            };\n        }\n        else {\n            this.pushResult = (value) => {\n                this.results.push(value);\n            };\n        }\n    }\n\n    protected removeDuplicates() {\n        let datas = this.results;\n        // free results memory\n        this.results = undefined;\n        const key = this.getPrimaryKey(this.query.from);\n        const lookupObject = {};\n        for (const i in datas) {\n            lookupObject[datas[i][key]] = datas[i];\n        }\n        // free datas memory\n        datas = [];\n        for (const i in lookupObject) {\n            datas.push(lookupObject[i]);\n        }\n        this.results = datas;\n    }\n}","import { Where } from \"./where\";\nimport { DATA_TYPE, QUERY_OPTION } from \"../../../common/index\";\nimport { getDataType, getObjectFirstKey } from \"../../utils/index\";\n\nexport class GroupByHelper extends Where {\n    protected processGroupBy() {\n        const groupBy = this.query.groupBy as any;\n        let datas = this.results;\n        const lookUpObj = {};\n        // free results memory\n        this.results = this.query.groupBy = null;\n        if (getDataType(groupBy) !== DATA_TYPE.Object) {\n            if (getDataType(groupBy) === DATA_TYPE.String) {\n                for (const i in datas) {\n                    lookUpObj[datas[i][groupBy as string]] = datas[i];\n                }\n            }\n            else {\n                let objKey;\n                for (const i in datas) {\n                    objKey = \"\";\n                    for (const column in groupBy) {\n                        objKey += datas[i][groupBy[column]];\n                    }\n                    lookUpObj[objKey] = datas[i];\n                }\n            }\n        }\n        else {\n            const caseQueryLength = Object.keys(groupBy).length;\n            if (caseQueryLength === 1) {\n                const groupByColumn = getObjectFirstKey(groupBy);\n                this.thenEvaluator.setCaseAndColumn(groupBy, groupByColumn);\n                for (const i in datas) {\n                    lookUpObj[this.thenEvaluator.setValue(datas[i]).evaluate()] = datas[i];\n                }\n            }\n            else {\n                let objKey;\n                for (const i in datas) {\n                    objKey = \"\";\n                    this.thenEvaluator.setCaseAndValue(groupBy, datas[i]);\n                    for (const column in groupBy) {\n                        objKey += this.thenEvaluator.setColumn(column).evaluate();\n                    }\n                    lookUpObj[objKey] = datas[i];\n                }\n            }\n        }\n        // free datas memory\n        datas = [];\n        for (const i in lookUpObj) {\n            datas.push(lookUpObj[i]);\n        }\n        this.results = datas;\n    }\n\n    protected executeAggregateGroupBy() {\n        const grpQry = this.query.groupBy as any;\n        let datas = this.results;\n        // free results memory\n        this.results = undefined;\n        const lookUpObj = {};\n        // assign aggregate\n        const aggregateQry = this.query.aggregate;\n\n        let index;\n        let objKey;\n        let value;\n        let columnToAggregate;\n        const calculateAggregate = () => {\n            const getCount = () => {\n                value = lookUpObj[objKey];\n                // get old value\n                value = value ? value[\"count(\" + columnToAggregate + \")\"] : 0;\n                // add with old value if data exist\n                value += datas[index][columnToAggregate] ? 1 : 0;\n                return value;\n            };\n            const getMax = () => {\n                value = lookUpObj[objKey];\n                // get old value\n                value = value ? value[\"max(\" + columnToAggregate + \")\"] : 0;\n                datas[index][columnToAggregate] = datas[index][columnToAggregate] ?\n                    datas[index][columnToAggregate] : 0;\n                // compare between old value and new value\n                return value > datas[index][columnToAggregate] ? value : datas[index][columnToAggregate];\n            };\n            const getMin = () => {\n                value = lookUpObj[objKey];\n                // get old value\n                value = value ? value[\"min(\" + columnToAggregate + \")\"] : Infinity;\n                datas[index][columnToAggregate] = datas[index][columnToAggregate] ?\n                    datas[index][columnToAggregate] : Infinity;\n                // compare between old value and new value\n                return value < datas[index][columnToAggregate] ? value : datas[index][columnToAggregate];\n            };\n            const getSum = () => {\n                value = lookUpObj[objKey];\n                // get old value\n                value = value ? value[\"sum(\" + columnToAggregate + \")\"] : 0;\n                // add with old value if data exist\n                value += datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0;\n                return value;\n            };\n            const getAvg = () => {\n                value = lookUpObj[objKey];\n                // get old sum value\n                let sumOfColumn = value ? value[\"sum(\" + columnToAggregate + \")\"] : 0;\n                // add with old value if data exist\n                sumOfColumn += datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0;\n                datas[index][\"sum(\" + columnToAggregate + \")\"] = sumOfColumn;\n                // get old count value\n                value = value ? value[\"count(\" + columnToAggregate + \")\"] : 0;\n                // add with old value if data exist\n                value += datas[index][columnToAggregate] ? 1 : 0;\n                datas[index][\"count(\" + columnToAggregate + \")\"] = value;\n            };\n            for (const prop in aggregateQry) {\n                const aggregateColumn = aggregateQry[prop];\n                const aggregateValType = getDataType(aggregateColumn);\n                let aggregateCalculator;\n                switch (prop) {\n                    case QUERY_OPTION.Count:\n                        aggregateCalculator = getCount;\n                        break;\n                    case QUERY_OPTION.Max:\n                        aggregateCalculator = getMax;\n                        break;\n                    case QUERY_OPTION.Min:\n                        aggregateCalculator = getMin;\n                        break;\n                    case QUERY_OPTION.Sum:\n                        aggregateCalculator = getSum;\n                        break;\n                    case QUERY_OPTION.Avg:\n                        aggregateCalculator = getAvg;\n                        break;\n                }\n                switch (aggregateValType) {\n                    case DATA_TYPE.String:\n                        columnToAggregate = aggregateColumn;\n                        datas[index][`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                        break;\n                    case DATA_TYPE.Array:\n                        for (const item in aggregateColumn) {\n                            columnToAggregate = aggregateColumn[item];\n                            datas[index][`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                        }\n                }\n            }\n        };\n\n        if (getDataType(grpQry) === DATA_TYPE.String) {\n            for (index in datas) {\n                objKey = datas[index][grpQry];\n                calculateAggregate();\n                lookUpObj[objKey] = datas[index];\n            }\n        }\n        else {\n            for (index in datas) {\n                objKey = \"\";\n                for (const column in grpQry) {\n                    objKey += datas[index][grpQry[column]];\n                }\n                calculateAggregate();\n                lookUpObj[objKey] = datas[index];\n            }\n\n        }\n        // free datas memory\n        datas = [];\n        for (const i in lookUpObj) {\n            datas.push(lookUpObj[i]);\n        }\n        // Checking for avg and if exist then fill the datas;\n        if (aggregateQry.avg) {\n            if (getDataType(aggregateQry.avg) === DATA_TYPE.String) {\n                for (index in datas) {\n                    const sumForAvg = datas[index][\"sum(\" + aggregateQry.avg + \")\"],\n                        countForAvg = datas[index][\"count(\" + aggregateQry.avg + \")\"];\n                    datas[index][\"avg(\" + aggregateQry.avg + \")\"] = sumForAvg / countForAvg;\n                    if (aggregateQry.count !== aggregateQry.avg) {\n                        delete datas[index][\"count(\" + aggregateQry.avg + \")\"];\n                    }\n                    if (aggregateQry.sum !== aggregateQry.avg) {\n                        delete datas[index][\"sum(\" + aggregateQry.avg + \")\"];\n                    }\n                }\n            }\n            else {\n                const isCountTypeString = getDataType(aggregateQry.count) === DATA_TYPE.String;\n                const isSumTypeString = getDataType(aggregateQry.sum) === DATA_TYPE.String;\n                for (index in datas) {\n                    for (const column in aggregateQry.avg as any) {\n                        const avgColumn = aggregateQry.avg[column],\n                            sum = datas[index][\"sum(\" + avgColumn + \")\"],\n                            count = datas[index][\"count(\" + avgColumn + \")\"];\n                        datas[index][\"avg(\" + avgColumn + \")\"] = sum / count;\n\n                        if (isCountTypeString) {\n                            if (aggregateQry.count !== avgColumn) {\n                                delete datas[index][\"count(\" + avgColumn + \")\"];\n                            }\n                            else if (aggregateQry.count.indexOf(avgColumn) === -1) {\n                                delete datas[index][\"count(\" + avgColumn + \")\"];\n                            }\n                        }\n\n                        if (isSumTypeString) {\n                            if (aggregateQry.sum !== avgColumn) {\n                                delete datas[index][\"sum(\" + avgColumn + \")\"];\n                            }\n                            else if (aggregateQry.sum.indexOf(avgColumn) === -1) {\n                                delete datas[index][\"sum(\" + avgColumn + \")\"];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.results = datas;\n    }\n}","export const removeSpace = (value: string) => {\n    return value.replace(/\\s/g, '');\n};","import { GroupByHelper } from \"./group_by_helper\";\nimport { DATA_TYPE, ERROR_TYPE, QUERY_OPTION, OrderQuery, CaseOption } from \"../../../common/index\";\nimport { LogHelper } from \"../../log_helper\";\nimport { getDataType, removeSpace, isArray } from \"../../utils/index\";\nimport { Column } from \"../../model/index\";\n\nexport class Helper extends GroupByHelper {\n\n    processGroupDistinctAggr() {\n        if (this.query.distinct) {\n            const groupBy = [];\n            const result = this.results[0];\n            for (const key in result) {\n                groupBy.push(key);\n            }\n            const primaryKey = this.getPrimaryKey(this.query.from),\n                index = groupBy.indexOf(primaryKey);\n            groupBy.splice(index, 1);\n            this.query.groupBy = groupBy.length > 0 ? groupBy : null;\n        }\n        if (this.query.groupBy) {\n            if (this.query.aggregate) {\n                this.executeAggregateGroupBy();\n            }\n            else {\n                this.processGroupBy();\n            }\n        }\n        else if (this.query.aggregate) {\n            this.processAggregateQry();\n        }\n    }\n\n    private getOrderColumnInfo_(orderColumn: string): Column {\n        let column: Column;\n        if (this.query.join == null) {\n            column = this.getColumnInfo(orderColumn, this.query.from);\n        }\n        else {\n            const splittedByDot = removeSpace(orderColumn).split(\".\");\n            orderColumn = splittedByDot[1];\n            column = this.getColumnInfo(orderColumn, splittedByDot[0]);\n        }\n        if (column == null) {\n            const valueFromFirstColumn = this.results[0][orderColumn];\n            if (valueFromFirstColumn) {\n                return {\n                    dataType: getDataType(valueFromFirstColumn),\n                    name: orderColumn\n                } as Column;\n            }\n            this.onErrorOccured(new LogHelper(ERROR_TYPE.ColumnNotExist, { column: orderColumn, isOrder: true }), true);\n        }\n        return column;\n    }\n\n    private compareStringInDesc_(a: string, b: string) {\n        return b.localeCompare(a);\n    }\n\n    private compareStringinAsc_(a: string, b: string) {\n        return a.localeCompare(b);\n    }\n\n    private compareDefaultInDesc_(a: string, b) {\n        return new String(b).localeCompare(a);\n    }\n\n    private compareDefaultinAsc_(a, b: string) {\n        return new String(a).localeCompare(b);\n    }\n\n    private compareNumberInDesc_(a: number, b: number) {\n        return b - a;\n    }\n\n    private compareNumberinAsc_(a: number, b: number) {\n        return a - b;\n    }\n\n    private compareDateInDesc_(a: Date, b: Date) {\n        return b.getTime() - a.getTime();\n    }\n\n    private compareDateInAsc_(a: Date, b: Date) {\n        return a.getTime() - b.getTime();\n    }\n\n    private getValInDesc_(value1, value2, caseQuery: { [columnName: string]: [CaseOption] }) {\n        for (const columnName in caseQuery) {\n            this.thenEvaluator.setCaseAndValue(caseQuery, value1);\n            const column1 = this.thenEvaluator.setColumn(columnName).evaluate();\n            this.thenEvaluator.setCaseAndValue(caseQuery, value2);\n            const column2 = this.thenEvaluator.setColumn(columnName).evaluate();\n            switch (typeof value1[column1]) {\n                case DATA_TYPE.String:\n                    return this.compareStringInDesc_(value1[column1], value2[column2]);\n                default:\n                    return this.compareNumberInDesc_(value1[column1], value2[column2]);\n            }\n        }\n    }\n\n    private getValInAsc_(value1, value2, caseQuery: { [columnName: string]: [CaseOption] }) {\n        for (const columnName in caseQuery) {\n            this.thenEvaluator.setCaseAndValue(caseQuery, value1);\n            const column1 = this.thenEvaluator.setColumn(columnName).evaluate();\n            this.thenEvaluator.setCaseAndValue(caseQuery, value2);\n            const column2 = this.thenEvaluator.setColumn(columnName).evaluate();\n            switch (typeof value1[column1]) {\n                case DATA_TYPE.String:\n                    return this.compareStringinAsc_(value1[column1], value2[column2]);\n                default:\n                    return this.compareNumberinAsc_(value1[column1], value2[column2]);\n            }\n        }\n    }\n\n    private getValueComparer_(column: Column, order: OrderQuery): (a, b) => number {\n\n        switch (column.dataType) {\n            case DATA_TYPE.String:\n                return order.type === 'asc' ? this.compareStringinAsc_ : this.compareStringInDesc_;\n            case DATA_TYPE.Number:\n                return order.type === 'asc' ? this.compareNumberinAsc_ : this.compareNumberInDesc_;\n            case DATA_TYPE.DateTime:\n                return order.type === 'asc' ? this.compareDateInAsc_ : this.compareDateInDesc_;\n            default:\n                return order.type === 'asc' ? this.compareDefaultinAsc_ : this.compareDefaultInDesc_;\n        }\n\n    }\n\n    private orderBy_(order: OrderQuery) {\n        order.type = this.getOrderType_(order.type);\n        let orderColumn = order.by;\n        if (orderColumn != null && typeof orderColumn === DATA_TYPE.Object) {\n            if (order.type === \"asc\") {\n                this.results.sort((a, b) => {\n                    return this.getValInAsc_(a, b, orderColumn as any);\n                });\n            }\n            else {\n                this.results.sort((a, b) => {\n                    return this.getValInDesc_(a, b, orderColumn as any);\n                });\n            }\n        }\n        else {\n            const columnInfo = this.getOrderColumnInfo_(orderColumn as string);\n            if (columnInfo != null) {\n                const orderMethod = this.getValueComparer_(columnInfo, order);\n                orderColumn = columnInfo.name;\n                if (order.case == null) {\n                    this.results.sort((a, b) => {\n                        return orderMethod(a[orderColumn as string], b[orderColumn as string]);\n                    });\n                }\n                else {\n                    this.thenEvaluator.setCaseAndColumn({ [orderColumn]: order.case }, orderColumn);\n                    this.results.sort((a, b) => {\n                        return orderMethod(\n                            this.thenEvaluator.setValue(a).evaluate(),\n                            this.thenEvaluator.setValue(b).evaluate()\n                        );\n                    });\n                }\n            }\n        }\n\n    }\n\n    private getOrderType_(type: string) {\n        return type == null ? 'asc' : type.toLowerCase();\n    }\n\n    protected processOrderBy() {\n        const order = this.query.order;\n        if (order && this.results.length > 0 && !this.sorted) {\n            const orderQueryType = getDataType(order);\n            if (orderQueryType === DATA_TYPE.Object) {\n                this.orderBy_(order);\n            }\n            else if (orderQueryType === DATA_TYPE.Array) {\n                this.orderBy_(order[0]);\n                for (let i = 1, length = (order as any).length; i < length; i++) {\n                    if (this.error == null) {\n                        const prevOrderQueryBy = order[i - 1].by;\n                        const currentOrderQuery: OrderQuery = order[i];\n                        let currentorderQueryBy = currentOrderQuery.by;\n                        const orderColumnDetail = this.getOrderColumnInfo_(currentorderQueryBy as string);\n                        if (orderColumnDetail != null) {\n                            currentorderQueryBy = orderColumnDetail.name;\n                            currentOrderQuery.type = this.getOrderType_(currentOrderQuery.type);\n                            const orderMethod = this.getValueComparer_(orderColumnDetail, currentOrderQuery);\n                            this.results.sort((a, b) => {\n                                if (a[prevOrderQueryBy] === b[prevOrderQueryBy]) {\n                                    return orderMethod(\n                                        a[currentorderQueryBy as string],\n                                        b[currentorderQueryBy as string]);\n                                }\n                                return 0;\n                            });\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    protected processAggregateQry() {\n        const datas = this.results;\n        const datasLength = datas.length;\n        const results = {};\n        let columnToAggregate;\n        // free results memory\n        this.results = undefined;\n        const getCount = () => {\n            let result = 0;\n            for (const i in datas) {\n                result += datas[i][columnToAggregate] ? 1 : 0;\n            }\n            return result;\n        };\n        const getMax = () => {\n            let result = 0;\n            for (const i in datas) {\n                result = result > datas[i][columnToAggregate] ?\n                    result : datas[i][columnToAggregate];\n            }\n            return result;\n        };\n        const getMin = () => {\n            let result = Infinity, value = Infinity;\n            for (const i in datas) {\n                value = datas[i][columnToAggregate] ?\n                    datas[i][columnToAggregate] : Infinity;\n                result = result < value ? result : value;\n            }\n            return result;\n        };\n        const getSum = () => {\n            let result = 0;\n            for (const i in datas) {\n                result += datas[i][columnToAggregate];\n            }\n            return result;\n        };\n        const getAvg = () => {\n            let result = 0;\n            for (const i in datas) {\n                result += datas[i][columnToAggregate];\n            }\n            return result / datasLength;\n        };\n        for (const prop in this.query.aggregate) {\n            const aggregateColumn = this.query.aggregate[prop];\n            const aggregateValType = getDataType(aggregateColumn);\n            let aggregateCalculator;\n            switch (prop) {\n                case 'count':\n                    aggregateCalculator = getCount; break;\n                case 'max':\n                    aggregateCalculator = getMax; break;\n                case 'min':\n                    aggregateCalculator = getMin; break;\n                case 'sum':\n                    aggregateCalculator = getSum; break;\n                case 'avg':\n                    aggregateCalculator = getAvg; break;\n            }\n            switch (aggregateValType) {\n                case DATA_TYPE.String:\n                    columnToAggregate = aggregateColumn;\n                    results[`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                    break;\n                case DATA_TYPE.Array:\n                    for (const key in aggregateColumn) {\n                        columnToAggregate = aggregateColumn[key];\n                        results[`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                    }\n            }\n        }\n\n        // add results to the first index of result\n        for (const prop in results) {\n            datas[0][prop] = results[prop];\n        }\n        this.results = [datas[0]];\n    }\n}","import * as Select from './instance';\nimport { QUERY_OPTION, DATA_TYPE, ERROR_TYPE, JoinQuery } from \"../../../common/index\";\nimport { Helper } from \"./orderby_helper\";\nimport { LogHelper } from \"../../log_helper\";\nimport { getDataType, removeSpace } from \"../../utils/index\";\n\nexport class Join extends Helper {\n\n    private joinQueryStack_: JoinQuery[] = [];\n    private currentQueryStackIndex_ = 0;\n    tablesFetched = [];\n\n    executeJoinQuery() {\n        const query = this.query;\n        if (getDataType(query.join) === DATA_TYPE.Object) {\n            this.joinQueryStack_ = [query.join as JoinQuery];\n        }\n        else {\n            this.joinQueryStack_ = query.join as JoinQuery[];\n        }\n        // get the data for first table\n        const tableName = query.from;\n        new Select.Instance({\n            from: tableName,\n            where: query.where,\n            case: query.case,\n            flatten: query.flatten\n        }, results => {\n            this.results = results.map((item) => {\n                return {\n                    [this.currentQueryStackIndex_]: item\n                };\n            });\n            this.tablesFetched.push(tableName);\n            this.startExecutingJoinLogic_();\n        }, this.onError).execute();\n    }\n\n    private onJoinQueryFinished_() {\n        if (this.error == null) {\n            if (this.results.length > 0) {\n\n                if (this.query[QUERY_OPTION.Skip] && !this.query[QUERY_OPTION.Limit]) {\n                    this.results.splice(0, this.query[QUERY_OPTION.Skip]);\n                }\n\n                try {\n                    let results = [];\n                    const tables = Object.keys(this.results[0]);\n                    const tablesLength = tables.length;\n                    const mapWithAlias = (query: JoinQuery, value: object) => {\n                        if (query.as != null) {\n                            for (const key in query.as) {\n                                if (value[(query.as as any)[key]] === undefined) {\n                                    value[(query.as as any)[key]] = value[key];\n                                    delete value[key];\n                                }\n                            }\n                        }\n                        return value;\n                    };\n                    this.results.forEach((result) => {\n                        let data = result[\"0\"]; // first table data\n                        for (let i = 1; i < tablesLength; i++) {\n                            const query = this.joinQueryStack_[i - 1];\n                            data = { ...data, ...mapWithAlias(query, result[i]) };\n                        }\n                        results.push(data);\n                    });\n                    this.results = results;\n                    // free results memory\n                    results = null;\n                    if (process.env.NODE_ENV === 'dev') {\n                        try {\n                            this.processOrderBy();\n                        }\n                        catch (ex) {\n                            this.onError({\n                                message: ex.message,\n                                type: ERROR_TYPE.InvalidOrderQuery\n                            });\n                            return;\n                        }\n                    }\n                    else {\n                        this.processOrderBy();\n                    }\n\n                    if (process.env.NODE_ENV === 'dev') {\n                        try {\n                            this.processGroupDistinctAggr();\n                        }\n                        catch (ex) {\n                            this.onError({\n                                message: ex.message,\n                                type: ERROR_TYPE.InvalidGroupQuery\n                            });\n                            return;\n                        }\n                    }\n                    else {\n                        this.processGroupDistinctAggr();\n                    }\n                }\n                catch (ex) {\n                    this.onError({\n                        message: ex.message,\n                        type: ERROR_TYPE.InvalidJoinQuery\n                    });\n                    return;\n                }\n\n                if (this.query[QUERY_OPTION.Skip] && this.query[QUERY_OPTION.Limit]) {\n                    this.results.splice(0, this.query[QUERY_OPTION.Skip]);\n                    this.results = this.results.slice(0, this.query[QUERY_OPTION.Limit]);\n                }\n                else if (this.query[QUERY_OPTION.Limit]) {\n                    this.results = this.results.slice(0, this.query[QUERY_OPTION.Limit]);\n                }\n            }\n            this.onSuccess(this.results);\n        }\n        else {\n            this.onError(this.error);\n        }\n    }\n\n    private startExecutingJoinLogic_() {\n        const query = this.joinQueryStack_[this.currentQueryStackIndex_];\n        if (query) {\n            try {\n                let jointblInfo = this.getJoinTableInfo_(query.on);\n                // table 1 is fetched & table2 needs to be fetched for join\n                if (query.with === jointblInfo.table1.table) {\n                    jointblInfo = {\n                        table1: jointblInfo.table2,\n                        table2: jointblInfo.table1\n                    };\n                }\n\n                if (process.env.NODE_ENV === 'dev') {\n                    this.checkJoinQuery_(jointblInfo, query);\n                    if (this.error != null) {\n                        return this.onJoinQueryFinished_();\n                    }\n                }\n\n                new Select.Instance({\n                    from: query.with,\n                    where: query.where,\n                    case: query.case,\n                    flatten: query.flatten\n                }, results => {\n                    this.jointables(query.type, jointblInfo, results);\n                    this.tablesFetched.push(jointblInfo.table2.table);\n                    ++this.currentQueryStackIndex_;\n                    this.startExecutingJoinLogic_();\n                }, this.onError).execute();\n            }\n            catch (ex) {\n                this.onExceptionOccured(ex);\n            }\n        }\n        else {\n            this.onJoinQueryFinished_();\n        }\n    }\n\n    private jointables(joinType: string, jointblInfo: JoinTableInfo, secondtableData: any[]) {\n\n        const results = [];\n        const column1 = jointblInfo.table1.column;\n        const column2 = jointblInfo.table2.column;\n        const table1Index = this.tablesFetched.indexOf(jointblInfo.table1.table);\n        const table2Index = this.currentQueryStackIndex_ + 1;\n        const performInnerJoin = () => {\n            let index = 0;\n            this.results.forEach(valueFromFirstTable => {\n                secondtableData.forEach((valueFromSecondTable) => {\n                    if (valueFromFirstTable[table1Index][column1] === valueFromSecondTable[column2]) {\n                        results[index] = { ...valueFromFirstTable };\n                        results[index++][table2Index] = valueFromSecondTable;\n                    }\n                });\n            });\n        };\n        const performleftJoin = () => {\n            let index = 0;\n            let valueMatchedFromSecondTable: any[];\n            let callBack;\n            const columnDefaultValue = {};\n            this.getTable(jointblInfo.table2.table).columns.forEach(col => {\n                columnDefaultValue[col.name] = null;\n            });\n            this.results.forEach((valueFromFirstTable) => {\n                valueMatchedFromSecondTable = [];\n                if (table2Index === 1) {\n                    callBack = function (valueFromSecondTable) {\n                        if (valueFromFirstTable[table1Index][column1] === valueFromSecondTable[column2]) {\n                            valueMatchedFromSecondTable.push(valueFromSecondTable);\n                        }\n                    };\n                }\n                else {\n                    callBack = function (valueFromSecondTable) {\n                        const value = valueFromFirstTable[table1Index];\n                        if (value != null && value[column1] === valueFromSecondTable[column2]) {\n                            valueMatchedFromSecondTable.push(valueFromSecondTable);\n                        }\n                    };\n                }\n                secondtableData.forEach(callBack);\n                if (valueMatchedFromSecondTable.length === 0) {\n                    valueMatchedFromSecondTable = [columnDefaultValue];\n                }\n                valueMatchedFromSecondTable.forEach(function (value) {\n                    results[index] = { ...valueFromFirstTable };\n                    results[index++][table2Index] = value;\n                });\n            });\n        };\n        switch (joinType) {\n            case \"left\":\n                performleftJoin(); break;\n            default:\n                performInnerJoin();\n        }\n        this.results = results;\n    }\n\n    private getJoinTableInfo_(joinOn: string) {\n        joinOn = removeSpace(joinOn);\n        const splittedjoinOn = joinOn.split(\"=\");\n        const splittedjoinOnbydotFirst = splittedjoinOn[0].split(\".\");\n        const splittedjoinOnbydotSecond = splittedjoinOn[1].split(\".\");\n        const info = {\n            table1: {\n                table: splittedjoinOnbydotFirst[0],\n                column: splittedjoinOnbydotFirst[1]\n            },\n            table2: {\n                table: splittedjoinOnbydotSecond[0],\n                column: splittedjoinOnbydotSecond[1]\n            }\n        } as JoinTableInfo;\n        return info;\n    }\n\n    private checkJoinQuery_(jointblInfo: JoinTableInfo, qry: JoinQuery) {\n        const table1 = jointblInfo.table1;\n        const table2 = jointblInfo.table2;\n        const tableSchemaOf1stTable = this.getTable(table1.table);\n        const tableSchemaOf2ndTable = this.getTable(table2.table);\n        let err: LogHelper;\n\n        // check on info & with info \n        if (qry.with !== table2.table) {\n            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                `on value should contains value of with`\n            );\n        }\n\n        // check for column existance\n\n        if (tableSchemaOf1stTable.columns.find(q => q.name === table1.column) == null) {\n            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                `column ${table1.column} does not exist in table ${table1.table}`\n            );\n        }\n        else if (tableSchemaOf2ndTable.columns.find(q => q.name === table2.column) == null) {\n            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                `column ${table2.column} does not exist in table ${table2.table}`\n            );\n        }\n\n        // check for column match in both table\n        if (qry.as == null) {\n            qry.as = {};\n        }\n        tableSchemaOf1stTable.columns.every(function (column) {\n            const columnFound = tableSchemaOf2ndTable.columns.find(q => q.name === column.name && q.name !== table1.column);\n            if (columnFound != null && qry.as[columnFound.name] == null) {\n                err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                    `column ${column.name} exist in both table ${table1.table} & ${table2.table}`\n                );\n                return false;\n            }\n            return true;\n        });\n        if (err != null) {\n            this.onErrorOccured(err, true);\n        }\n    }\n}\n\ntype JoinTableInfo = {\n    table1: { table: string, column: string }\n    table2: { table: string, column: string }\n};","export const isArray = (value) => {\n    return Array.isArray(value);\n};","import { SelectQuery, IError, IDB_MODE, QUERY_OPTION, API } from \"../../../common/index\";\nimport { Join } from \"./join\";\nimport { QueryHelper } from \"../query_helper\";\nimport { isArray, getObjectFirstKey, isObject, getKeys } from \"../../utils/index\";\n\nexport class Instance extends Join {\n\n    constructor(query: SelectQuery, onSuccess: (results: object[]) => void, onError: (err: IError) => void) {\n        super();\n        this.onError = onError;\n        this.onSuccess = onSuccess;\n        this.query = query;\n        this.tableName = query.from;\n        this.setPushResult();\n        if (isArray(this.query.where)) {\n            this.isArrayQry = true;\n            this.setLimitAndSkipEvaluationAtEnd_();\n        }\n        else {\n            this.skipRecord = query.skip;\n            this.limitRecord = query.limit;\n        }\n        if (query.order) {\n            if (isArray(query.order) || query.order.case || isObject(query.order.by)) {\n                this.query.order.idbSorting = false;\n            }\n            this.setLimitAndSkipEvaluationAtEnd_();\n        }\n        else if (query.groupBy) {\n            this.setLimitAndSkipEvaluationAtEnd_();\n        }\n\n    }\n\n    private setLimitAndSkipEvaluationAtEnd_() {\n        if (this.query.limit) {\n            this.shouldEvaluateLimitAtEnd = true;\n        }\n        if (this.query.skip) {\n            this.shouldEvaluateSkipAtEnd = true;\n        }\n    }\n\n    execute() {\n        const queryHelper = new QueryHelper(API.Select, this.query);\n        queryHelper.checkAndModify();\n        if (queryHelper.error == null) {\n            try {\n                if (this.query.join == null) {\n                    if (this.query.where != null) {\n                        this.initTransaction_();\n                        if (isArray(this.query.where)) {\n                            this.processWhereArrayQry();\n                        }\n                        else {\n                            this.processWhere_();\n                        }\n                    }\n                    else {\n                        this.initTransaction_();\n                        this.executeWhereUndefinedLogic();\n                    }\n\n                }\n                else {\n                    this.executeJoinQuery();\n                }\n            }\n            catch (ex) {\n                this.onExceptionOccured(ex);\n            }\n        }\n        else {\n            this.onError(\n                queryHelper.error\n            );\n        }\n    }\n\n\n    private processWhereArrayQry() {\n        this.isArrayQry = true;\n        const whereQuery = this.query.where,\n            pKey = this.getPrimaryKey(this.query.from);\n        let isFirstWhere = true, output = [], operation;\n\n        const isItemExist = (keyValue) => {\n            return output.findIndex(item => item[pKey] === keyValue) >= 0;\n        };\n        const onSuccess = () => {\n            if (operation === QUERY_OPTION.And) {\n                const doAnd = () => {\n                    let andResults = [];\n                    this.results.forEach((item) => {\n                        if (isItemExist(item[pKey])) {\n                            andResults.push(item);\n                        }\n                    });\n                    output = andResults;\n                    andResults = null;\n                };\n\n                if (isFirstWhere === true) {\n                    output = this.results;\n                }\n                else if (output.length > 0) {\n                    doAnd();\n                }\n            }\n            else {\n                if (output.length > 0) {\n                    this.results = [...output, ...this.results];\n                    this.removeDuplicates();\n                    output = this.results;\n                }\n                else {\n                    output = this.results;\n                }\n            }\n            isFirstWhere = false;\n            if (whereQuery.length > 0) {\n                this.results = [];\n                processFirstQry();\n            }\n            else {\n                this.results = output;\n                if (this.isSubQuery === true) {\n                    this.onTransactionCompleted_();\n                }\n            }\n\n        };\n        const processFirstQry = () => {\n            this.query.where = whereQuery.shift();\n            if (this.query.where[QUERY_OPTION.Or]) {\n                if (Object.keys(this.query.where).length === 1) {\n                    operation = QUERY_OPTION.Or;\n                    this.query.where = this.query.where[QUERY_OPTION.Or];\n                    this.onWhereArrayQrySuccess = onSuccess;\n                }\n                else {\n                    operation = QUERY_OPTION.And;\n                    this.onWhereArrayQrySuccess = onSuccess;\n                }\n            }\n            else {\n                operation = QUERY_OPTION.And;\n                this.onWhereArrayQrySuccess = onSuccess;\n            }\n            this.processWhere_();\n        };\n        processFirstQry();\n    }\n\n    protected onQueryFinished() {\n        if (this.isOr === true) {\n            this.orQuerySuccess_();\n        }\n        else if (this.isArrayQry === true) {\n            this.onWhereArrayQrySuccess();\n        }\n        else if (this.isTransaction === true || this.isSubQuery === true) {\n            this.onTransactionCompleted_();\n        }\n    }\n\n    private initTransaction_() {\n        this.createTransaction([this.tableName], this.onTransactionCompleted_, IDB_MODE.ReadOnly);\n        this.objectStore = this.transaction.objectStore(this.tableName);\n    }\n\n    private processWhere_() {\n        if (this.query.where.or) {\n            this.processOrLogic_();\n        }\n        this.goToWhereLogic();\n    }\n\n    private onTransactionCompleted_ = () => {\n        if (this.error == null) {\n            if (this.query.flatten) {\n                const flattendData = [];\n                const indexToDelete = {};\n                this.query.flatten.forEach(column => {\n                    this.results.forEach((data, i) => {\n                        data[column].forEach(item => {\n                            flattendData.push(\n                                { ...data, ...{ [column]: item } }\n                            );\n                        });\n                        indexToDelete[i] = true;\n                    });\n                });\n                let itemsDeleted = 0;\n                getKeys(indexToDelete).forEach(key => {\n                    this.results.splice(Number(key) - itemsDeleted, 1);\n                    ++itemsDeleted;\n                });\n                this.results = this.results.concat(flattendData);\n            }\n            this.processGroupDistinctAggr();\n            this.processOrderBy();\n            if (!this.error) {\n                if (this.shouldEvaluateSkipAtEnd) {\n                    this.results.splice(0, this.query.skip);\n                }\n                if (this.shouldEvaluateLimitAtEnd) {\n                    this.results = this.results.slice(0, this.query.limit);\n                }\n                this.onSuccess(this.results);\n            }\n            else {\n                this.onError(this.error);\n            }\n        }\n        else {\n            this.onError(this.error);\n        }\n    }\n\n    private orQueryFinish_() {\n        this.isOr = false;\n        this.results = this.orInfo.results;\n        // free or info memory\n        this.orInfo = null;\n        this.removeDuplicates();\n        this.onQueryFinished();\n    }\n\n    private orQuerySuccess_() {\n        this.orInfo.results = [... this.orInfo.results, ...this.results];\n        if (!this.query.limit || (this.query.limit > this.orInfo.results.length)) {\n            this.results = [];\n            const key = getObjectFirstKey(this.orInfo.orQuery);\n            if (key != null) {\n                const where = {};\n                where[key] = this.orInfo.orQuery[key];\n                delete this.orInfo.orQuery[key];\n                this.query.where = where;\n                this.goToWhereLogic();\n            }\n            else {\n                this.orQueryFinish_();\n            }\n        }\n        else {\n            this.orQueryFinish_();\n        }\n    }\n\n    private processOrLogic_() {\n        this.isOr = true;\n        this.orInfo = {\n            orQuery: this.query.where.or,\n            results: []\n        };\n        // free or memory\n        delete this.query.where.or;\n    }\n}","export const getKeys = (value) => {\n    return Object.keys(value);\n};","export const isObject = (value) => {\n    return typeof value === 'object';\n};","import { WhereBase } from \"../where_base\";\nimport { CountQuery } from \"../../../common/index\";\n\nexport class BaseCount extends WhereBase {\n    resultCount = 0;\n    query: CountQuery;\n\n    protected onQueryFinished() {\n        if (this.isTransaction === true) {\n            this.onTransactionCompleted_();\n        }\n    }\n\n    protected onTransactionCompleted_ = () => {\n        if (this.error == null) {\n            this.onSuccess(this.resultCount);\n        }\n        else {\n            this.onError(this.error);\n        }\n    }\n}\n","import { BaseCount } from \"./base_count\";\n\nexport class NotWhere extends BaseCount {\n    protected executeWhereUndefinedLogic() {\n        let countRequest;\n        if (this.objectStore.count) {\n            countRequest = this.objectStore.count();\n            countRequest.onsuccess = () => {\n                this.resultCount = countRequest.result;\n                this.onQueryFinished();\n            };\n        }\n        else {\n            let cursor;\n            countRequest = this.objectStore.openCursor();\n            countRequest.onsuccess = (e: any) => {\n                cursor = e.target.result;\n                if (cursor) {\n                    ++this.resultCount;\n                    cursor.continue();\n                }\n                else {\n                    this.onQueryFinished();\n                }\n            };\n        }\n        countRequest.onerror = this.onErrorOccured.bind(this);\n    }\n}\n","import { NotWhere } from \"./not_where\";\nimport { promiseAll, promise } from \"../../helpers/index\";\n\nexport class In extends NotWhere {\n    protected executeInLogic(column, values) {\n        let cursor: IDBCursorWithValue, cursorRequest;\n        const columnStore = this.objectStore.index(column);\n        let runInLogic: (val) => Promise<void> = (value) => {\n            return promise<void>((res, rej) => {\n                cursorRequest = columnStore.openCursor(this.getKeyRange(value));\n                cursorRequest.onsuccess = (e) => {\n                    cursor = e.target.result;\n                    if (cursor) {\n                        if (this.whereCheckerInstance.check(cursor.value)) {\n                            ++this.resultCount;\n                        }\n                        cursor.continue();\n                    }\n                    else {\n                        res();\n                    }\n                };\n                cursorRequest.onerror = rej;\n            });\n        };\n\n        if (this.objectStore.count) {\n            runInLogic = (value) => {\n                return promise((res, rej) => {\n                    cursorRequest = columnStore.count(this.getKeyRange(value));\n                    cursorRequest.onsuccess = (e) => {\n                        this.resultCount += e.target.result;\n                        res();\n                    };\n                    cursorRequest.onerror = rej;\n                });\n            };\n        }\n\n        promiseAll(\n            values.map(function (val) {\n                return runInLogic(val);\n            })\n        ).then(() => {\n            this.onQueryFinished();\n        }).catch(err => {\n            this.onErrorOccured(err);\n        });\n    }\n}","import { In } from \"./in\";\nexport class Regex extends In {\n    protected executeRegexLogic(column: string, exp: RegExp) {\n        let cursor: IDBCursorWithValue;\n        this.regexExpression = exp;\n        const cursorRequest = this.objectStore.index(column).openCursor();\n\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.regexTest(cursor.key) &&\n                    this.whereCheckerInstance.check(cursor.value)) {\n                    ++this.resultCount;\n                }\n                cursor.continue();\n            }\n            else {\n                this.onQueryFinished();\n            }\n        };\n\n        cursorRequest.onerror = this.onErrorOccured.bind(this);\n\n    }\n}","import { Regex } from \"./regex\";\n\nexport class Where extends Regex {\n    protected executeWhereLogic(column, value, op) {\n        value = op ? value[op] : value;\n        let cursorRequest;\n        let cursor: IDBCursorWithValue;\n        let initCursorAndFilter;\n        if (Object.keys(this.query.where).length === 1 && this.objectStore.count) {\n            initCursorAndFilter = () => {\n                cursorRequest = this.objectStore.index(column).count(this.getKeyRange(value, op));\n                cursorRequest.onsuccess = () => {\n                    this.resultCount = cursorRequest.result;\n                    this.onQueryFinished();\n                };\n            };\n\n        }\n        else {\n            initCursorAndFilter = () => {\n                cursorRequest = this.objectStore.index(column).openCursor(this.getKeyRange(value, op));\n                cursorRequest.onsuccess = (e) => {\n                    cursor = e.target.result;\n                    if (cursor) {\n                        if (this.whereCheckerInstance.check(cursor.value)) {\n                            ++this.resultCount;\n                        }\n                        cursor.continue();\n                    }\n                    else {\n                        this.onQueryFinished();\n                    }\n                };\n            };\n        }\n        initCursorAndFilter();\n\n        cursorRequest.onerror = this.onErrorOccured.bind(this);\n    }\n}","import { Where } from \"./where\";\nimport { IError, API, CountQuery, IDB_MODE } from \"../../../common/index\";\nimport * as Select from '../select/index';\nimport { QueryHelper } from \"../query_helper\";\nimport { isArray } from \"../../utils/index\";\n\nexport class Instance extends Where {\n\n    constructor(query: CountQuery, onSuccess: (noOfRecord: number) => void, onError: (error: IError) => void) {\n        super();\n        this.onError = onError;\n        this.onSuccess = onSuccess;\n        this.query = query;\n        this.tableName = query.from;\n    }\n\n    execute() {\n        const queryHelper = new QueryHelper(API.Count, this.query);\n        queryHelper.checkAndModify();\n        if (queryHelper.error == null) {\n            try {\n                const getDataFromSelect = () => {\n                    const selectInstance = new Select.Instance(this.query as any,\n                        (results) => {\n                            this.resultCount = results.length;\n                            this.onTransactionCompleted_();\n                        }, this.onError);\n                    selectInstance.execute();\n                };\n                if (this.query.join == null) {\n                    if (this.query.where != null) {\n                        if (this.query.where.or || isArray(this.query.where)) {\n                            getDataFromSelect();\n                        }\n                        else {\n                            this.initTransaction_();\n                            this.goToWhereLogic();\n                        }\n                    }\n                    else {\n                        this.initTransaction_();\n                        this.executeWhereUndefinedLogic();\n                    }\n                }\n                else {\n                    getDataFromSelect();\n                }\n            }\n            catch (ex) {\n                this.onExceptionOccured(ex);\n            }\n        }\n        else {\n            this.onError(\n                queryHelper.error\n            );\n        }\n    }\n\n    private initTransaction_() {\n        this.createTransaction([this.query.from], this.onTransactionCompleted_, IDB_MODE.ReadOnly);\n        this.objectStore = this.transaction.objectStore(this.query.from);\n    }\n}","import { Base } from \"../base\";\nimport { InsertQuery, IError, API } from \"../../../common/index\";\nimport { Table } from \"../../model/index\";\nimport { promiseAll, promise } from \"../../helpers/index\";\nimport { QueryHelper } from \"../query_helper\";\n\nexport class Instance extends Base {\n    private valuesAffected_ = [];\n    query: InsertQuery;\n    table: Table;\n\n    constructor(query: InsertQuery, onSuccess: (rowsInserted: number) => void, onError: (err: IError) => void) {\n        super();\n        this.onError = onError;\n        this.query = query;\n        this.onSuccess = onSuccess;\n        this.tableName = this.query.into;\n    }\n\n    execute() {\n        const queryHelper = new QueryHelper(API.Insert, this.query);\n        queryHelper.checkAndModify().then(() => {\n            this.query = queryHelper.query;\n            this.insertData_(this.query.values);\n        }).catch(this.onError);\n    }\n\n    private onTransactionCompleted_ = () => {\n        if (this.error == null) {\n            this.onSuccess(this.query.return === true ? this.valuesAffected_ : this.rowAffected);\n        }\n        else {\n            this.onError(this.error);\n        }\n    }\n\n    private onQueryFinished_() {\n        if (this.isTransaction === true) {\n            this.onTransactionCompleted_();\n        }\n    }\n\n    private insertData_(values: any[]) {\n\n        let objectStore: IDBObjectStore;\n        let onInsertData;\n        let addMethod;\n\n        if (this.query.return) {\n            onInsertData = (value) => {\n                this.valuesAffected_.push(value);\n            };\n\n        }\n        else {\n            onInsertData = (value) => {\n                ++this.rowAffected;\n            };\n        }\n\n        this.createTransaction([this.tableName], this.onTransactionCompleted_);\n        objectStore = this.transaction.objectStore(this.tableName);\n        if (this.query.upsert) {\n            addMethod = (value) => {\n                return objectStore.put(value);\n            };\n        }\n        else {\n            addMethod = (value) => {\n                return objectStore.add(value);\n            };\n        }\n        promiseAll(\n            values.map(function (value) {\n                return promise(function (res, rej) {\n                    const addResult = addMethod(value);\n                    addResult.onerror = rej;\n                    addResult.onsuccess = function () {\n                        onInsertData(value);\n                        res();\n                    };\n                });\n            })\n        ).then(() => {\n            this.onQueryFinished_();\n        }).catch((err) => {\n            this.transaction.abort();\n            this.onErrorOccured(err);\n        });\n    }\n}","import { WhereBase } from \"../where_base\";\nimport { RemoveQuery } from \"../../../common/index\";\n\nexport class BaseRemove extends WhereBase {\n\n    isOr: boolean;\n    query: RemoveQuery;\n\n    protected onQueryFinished() {\n        // ff\n    }\n}\n","import { BaseRemove } from \"./base_remove\";\n\nexport class NotWhere extends BaseRemove {\n    protected executeWhereUndefinedLogic() {\n        let cursor;\n        const cursorRequest = this.objectStore.openCursor();\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                cursor.delete();\n                ++this.rowAffected;\n                (cursor as any).continue();\n            }\n            else {\n                this.onQueryFinished();\n            }\n        };\n        cursorRequest.onerror = this.onErrorOccured.bind(this);\n    }\n}\n","import { NotWhere } from \"./not_where\";\nimport { promiseAll, promise } from \"../../helpers/index\";\n\nexport class In extends NotWhere {\n    protected executeInLogic(column, values) {\n        let cursor: IDBCursorWithValue, cursorRequest;\n        const runInLogic: (val) => Promise<void> = (value) => {\n            return promise((res, rej) => {\n                cursorRequest = this.objectStore.index(column).openCursor(this.getKeyRange(value));\n                cursorRequest.onsuccess = (e) => {\n                    cursor = e.target.result;\n                    if (cursor) {\n                        if (this.whereCheckerInstance.check(cursor.value)) {\n                            cursor.delete();\n                            ++this.rowAffected;\n                        }\n                        cursor.continue();\n                    }\n                    else {\n                        res();\n                    }\n                };\n                cursorRequest.onerror = rej;\n            });\n        };\n\n        promiseAll(\n            values.map(function (val) {\n                return runInLogic(val);\n            })\n        ).then(() => {\n            this.onQueryFinished();\n        }).catch(err => {\n            this.onErrorOccured(err);\n        });\n    }\n}","import { In } from \"./in\";\n\nexport class Regex extends In {\n    protected executeRegexLogic(column: string, exp: RegExp) {\n        let cursor: IDBCursorWithValue;\n        this.regexExpression = exp;\n        const cursorRequest = this.objectStore.index(column).openCursor();\n\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.regexTest(cursor.key) &&\n                    this.whereCheckerInstance.check(cursor.value)) {\n                    cursor.delete();\n                    ++this.rowAffected;\n                }\n                cursor.continue();\n            }\n            else {\n                this.onQueryFinished();\n            }\n        };\n        cursorRequest.onerror = this.onErrorOccured.bind(this);\n    }\n}","import { Regex } from \"./regex\";\n\nexport class Where extends Regex {\n    protected executeWhereLogic(column, value, op) {\n        let cursor: IDBCursorWithValue,\n            cursorRequest;\n        value = op ? value[op] : value;\n        cursorRequest = this.objectStore.index(column).openCursor(this.getKeyRange(value, op));\n\n        cursorRequest.onsuccess = (e) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.whereCheckerInstance.check(cursor.value)) {\n                    cursor.delete();\n                    ++this.rowAffected;\n                }\n                cursor.continue();\n            }\n            else {\n                this.onQueryFinished();\n            }\n        };\n\n        cursorRequest.onerror = this.onErrorOccured.bind(this);\n    }\n}\n","import { Where } from \"./where\";\nimport { RemoveQuery, QUERY_OPTION, API, IError } from \"../../../common/index\";\nimport * as Select from '../select/index';\nimport { QueryHelper } from \"../index\";\nimport { getObjectFirstKey, isArray } from \"../../utils/index\";\n\nexport class Instance extends Where {\n\n\n    constructor(\n        query: RemoveQuery, onSuccess: (recordRemoved: number) => void,\n        onError: (err: IError) => void\n    ) {\n        super();\n        this.query = query;\n        this.onSuccess = onSuccess;\n        this.onError = onError;\n        this.tableName = this.query.from;\n    }\n\n    execute() {\n        const queryHelper = new QueryHelper(API.Remove, this.query);\n        queryHelper.checkAndModify();\n        if (queryHelper.error == null) {\n            try {\n                this.initTransaction_();\n                if (this.query.where != null) {\n                    if (isArray(this.query.where)) {\n                        this.processWhereArrayQry();\n                    }\n                    else {\n                        this.processWhere_();\n                    }\n                }\n                else {\n                    this.executeWhereUndefinedLogic();\n                }\n\n            }\n            catch (ex) {\n                this.onExceptionOccured(ex);\n            }\n        }\n        else {\n            this.onError(\n                queryHelper.error\n            );\n        }\n    }\n\n    private processWhereArrayQry() {\n        const selectObject = new Select.Instance(this.query, (results) => {\n            const keyList = [];\n            const pkey = this.getPrimaryKey(this.query.from);\n            results.forEach((item) => {\n                keyList.push(item[pkey]);\n            });\n            results = null;\n            const whereQry = { [pkey]: { [QUERY_OPTION.In]: keyList } };\n            this.query[QUERY_OPTION.Where] = whereQry;\n            this.processWhere_();\n        }, this.onError);\n        selectObject.isSubQuery = true;\n        selectObject.execute();\n    }\n\n    private processWhere_() {\n        if (this.query.where.or) {\n            this.processOrLogic();\n        }\n        this.goToWhereLogic();\n    }\n\n    private initTransaction_() {\n        this.createTransaction([this.query.from], this.onTransactionCompleted_);\n        this.objectStore = this.transaction.objectStore(this.query.from);\n    }\n\n    private onTransactionCompleted_ = () => {\n        if (this.error == null) {\n            this.onSuccess(this.rowAffected);\n        }\n        else {\n            this.onError(this.error);\n        }\n    }\n\n    protected onQueryFinished() {\n        if (this.isOr === true) {\n            this.orQuerySuccess_();\n        }\n        else if (this.isTransaction === true) {\n            this.onTransactionCompleted_();\n        }\n    }\n\n    private orQuerySuccess_() {\n        const key = getObjectFirstKey((this as any)._orInfo.OrQuery);\n        if (key != null) {\n            const where = {};\n            where[key] = (this as any)._orInfo.OrQuery[key];\n            delete (this as any)._orInfo.OrQuery[key];\n            this.query.where = where;\n            this.goToWhereLogic();\n        }\n        else {\n            this.isOr = true;\n        }\n    }\n\n    private processOrLogic() {\n        this.isOr = true;\n        (this as any)._orInfo = {\n            OrQuery: this.query.where.or\n        };\n\n        // free or memory\n        delete this.query.where.or;\n    }\n}","import { Base } from \"../base\";\nimport { getDataType } from \"../../utils/index\";\nimport { DATA_TYPE, UpdateQuery } from \"../../../common/index\";\n\nexport const updateValue = (suppliedValue, storedValue) => {\n    for (const key in suppliedValue) {\n        if (getDataType(suppliedValue[key]) !== DATA_TYPE.Object) {\n            storedValue[key] = suppliedValue[key];\n        }\n        else {\n            for (const op in suppliedValue[key]) {\n                switch (op as any) {\n                    case '+': storedValue[key] += suppliedValue[key][op]; break;\n                    case '-': storedValue[key] -= suppliedValue[key][op]; break;\n                    case '*': storedValue[key] *= suppliedValue[key][op]; break;\n                    case '/': storedValue[key] /= suppliedValue[key][op]; break;\n                    case '{push}': storedValue[key].push(suppliedValue[key][op]); break;\n                    default: storedValue[key] = suppliedValue[key];\n                }\n                break;\n            }\n        }\n    }\n    return storedValue;\n};\n\nexport class BaseUpdate extends Base {\n    query: UpdateQuery;\n    protected initTransaction() {\n        this.createTransaction([this.query.in], this.onTransactionCompleted_);\n        this.objectStore = this.transaction.objectStore(this.query.in);\n    }\n\n    protected onQueryFinished() {\n        if (this.isTransaction === true) {\n            this.onTransactionCompleted_();\n        }\n    }\n\n    private onTransactionCompleted_ = () => {\n        if (this.error) {\n            this.onError(this.error);\n        }\n        else {\n            this.onSuccess(this.rowAffected);\n        }\n    }\n}\n","import { BaseUpdate, updateValue } from \"./base_update\";\n\nexport class NotWhere extends BaseUpdate {\n\n    protected executeWhereUndefinedLogic() {\n        let cursor: IDBCursorWithValue;\n        const cursorRequest: IDBRequest<IDBCursorWithValue> = this.objectStore.openCursor();\n        cursorRequest.onsuccess = (e) => {\n            cursor = (e as any).target.result;\n            if (cursor) {\n                try {\n                    const cursorUpdateRequest = cursor.update(updateValue(this.query.set, cursor.value));\n                    cursorUpdateRequest.onsuccess = () => {\n                        ++this.rowAffected;\n                        cursor.continue();\n                    };\n                    cursorUpdateRequest.onerror = this.onErrorOccured.bind(this);\n                } catch (err) {\n                    this.onErrorOccured(err);\n                    this.transaction.abort();\n                }\n            }\n            else {\n                this.onQueryFinished();\n            }\n\n        };\n        cursorRequest.onerror = this.onErrorOccured.bind(this);\n    }\n}\n","import { NotWhere } from \"./not_where\";\nimport { updateValue } from \"./base_update\";\nimport { promiseAll, promise } from \"../../helpers/index\";\n\nexport class In extends NotWhere {\n    private executeInLogic(column, values: any[]) {\n        let cursor: IDBCursorWithValue;\n        const columnStore = this.objectStore.index(column);\n        let cursorRequest;\n        const runInLogic: (val) => Promise<void> = (value) => {\n            return promise((res, rej) => {\n                cursorRequest = columnStore.openCursor(this.getKeyRange(value));\n                cursorRequest.onsuccess = (e) => {\n                    cursor = e.target.result;\n                    if (cursor) {\n                        if (this.whereCheckerInstance.check(cursor.value)) {\n                            cursor.update(updateValue(this.query.set, cursor.value));\n                            ++this.rowAffected;\n                        }\n                        cursor.continue();\n                    }\n                    else {\n                        res();\n                    }\n                };\n                cursorRequest.onerror = rej;\n            });\n        };\n\n        promiseAll(\n            values.map(function (val) {\n                return runInLogic(val);\n            })\n        ).then(() => {\n            this.onQueryFinished();\n        }).catch(err => {\n            this.onErrorOccured(err);\n        });\n    }\n}","import { In } from \"./in\";\nimport { updateValue } from \"./base_update\";\n\nexport class Regex extends In {\n    protected executeRegexLogic(column: string, exp: RegExp) {\n        let cursor: IDBCursorWithValue;\n        this.regexExpression = exp;\n        const cursorOpenRequest = this.objectStore.index(column).openCursor();\n        cursorOpenRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.regexTest(cursor.key) &&\n                    this.whereCheckerInstance.check(cursor.value)) {\n                    try {\n                        const cursorUpdateRequest = cursor.update(updateValue(this.query.set, cursor.value));\n                        cursorUpdateRequest.onsuccess = () => {\n                            ++this.rowAffected;\n                            cursor.continue();\n                        };\n                        cursorUpdateRequest.onerror = this.onErrorOccured.bind(this);\n                    } catch (err) {\n                        this.transaction.abort();\n                        this.onErrorOccured(err);\n                    }\n                }\n                else {\n                    cursor.continue();\n                }\n\n            }\n            else {\n                this.onQueryFinished();\n            }\n        };\n        cursorOpenRequest.onerror = this.onErrorOccured.bind(this);\n    }\n}\n","import { updateValue } from \"./base_update\";\nimport { Regex } from \"./regex\";\n\nexport class Where extends Regex {\n    protected executeWhereLogic(column, value, op) {\n        let cursor: IDBCursorWithValue,\n            cursorRequest;\n        value = op ? value[op] : value;\n        cursorRequest = this.objectStore.index(column).openCursor(this.getKeyRange(value, op));\n\n        cursorRequest.onsuccess = (e) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.whereCheckerInstance.check(cursor.value)) {\n                    try {\n                        const cursorUpdateRequest = cursor.update(updateValue(this.query.set, cursor.value));\n                        cursorUpdateRequest.onsuccess = () => {\n                            ++this.rowAffected;\n                            cursor.continue();\n                        };\n                        cursorUpdateRequest.onerror = this.onErrorOccured.bind(this);\n                    } catch (err) {\n                        this.transaction.abort();\n                        this.onErrorOccured(err);\n                    }\n                }\n                else {\n                    cursor.continue();\n                }\n            }\n            else {\n                this.onQueryFinished();\n            }\n        };\n        cursorRequest.onerror = this.onErrorOccured.bind(this);\n\n    }\n}","import { Where } from \"./where\";\nimport * as Select from \"../select/index\";\nimport { QueryHelper } from \"../query_helper\";\nimport { isArray } from \"../../utils/index\";\nimport { UpdateQuery, IError, API, SelectQuery, QUERY_OPTION } from \"../../../common/index\";\n\nexport class Instance extends Where {\n\n    constructor(query: UpdateQuery, onSuccess: (rowsUpdated: number) => void, onError: (err: IError) => void) {\n        super();\n        this.onSuccess = onSuccess;\n        this.onError = onError;\n        this.query = query;\n        this.tableName = this.query.in;\n    }\n\n    execute() {\n        const queryHelper = new QueryHelper(API.Update, this.query);\n        queryHelper.checkAndModify();\n        if (queryHelper.error == null) {\n            try {\n                this.initTransaction();\n                if (this.query.where != null) {\n                    if (this.query.where.or || isArray(this.query.where)) {\n                        this.executeComplexLogic_();\n                    }\n                    else {\n                        this.goToWhereLogic();\n                    }\n                }\n                else {\n                    this.executeWhereUndefinedLogic();\n                }\n            }\n            catch (ex) {\n                this.onExceptionOccured(ex);\n            }\n        }\n        else {\n            this.onError(\n                queryHelper.error\n            );\n        }\n    }\n\n    private executeComplexLogic_() {\n        const selectObject = new Select.Instance({\n            from: this.query.in,\n            where: this.query.where,\n            ignoreCase: this.query.ignoreCase\n        } as SelectQuery, (results: any[]) => {\n            const key = this.getPrimaryKey(this.query.in);\n            const inQuery = [];\n            results.forEach((value) => {\n                inQuery.push(value[key]);\n            });\n            results = null;\n            const whereQry = { [key]: { [QUERY_OPTION.In]: inQuery } };\n            this.query.ignoreCase = null;\n            this.query[QUERY_OPTION.Where] = whereQry;\n            this.initTransaction();\n            this.goToWhereLogic();\n        }, this.onError);\n        selectObject.isSubQuery = true;\n        selectObject.execute();\n    }\n}\n","import {\n    TranscationQuery, WebWorkerRequest, SelectQuery, RemoveQuery,\n    CountQuery, UpdateQuery, InsertQuery, ERROR_TYPE, API, IError\n} from \"../../../common/index\";\nimport { Base } from \"../base\";\nimport * as Select from '../select/index';\nimport * as Count from '../count/index';\nimport * as Insert from '../insert/index';\nimport * as Remove from '../remove/index';\nimport * as Update from '../update/index';\nimport { QueryHelper } from \"../query_helper\";\nimport { LogHelper } from \"../../log_helper\";\nimport { promise, promiseAll, getAutoIncrementValues } from \"../../helpers/index\";\n\nexport class Instance extends Base {\n    query: TranscationQuery;\n    results;\n    reqQueue: WebWorkerRequest[] = [];\n    isQueryExecuting = false;\n\n    isTxStarted_ = false;\n\n    constructor(qry: TranscationQuery, onSuccess: (results: any) => void, onError: (err: IError) => void) {\n        super();\n        this.query = qry;\n        this.onError = onError;\n        this.onSuccess = onSuccess;\n        this.results = {};\n    }\n\n    execute() {\n        const notExistingTable = this.getNotExistingTable_(this.query.tables);\n        if (notExistingTable != null) {\n            this.onError(new LogHelper(ERROR_TYPE.TableNotExist, { tableName: notExistingTable }).get());\n            return;\n        }\n        promiseAll<number>(this.query.tables.map(table => {\n            return getAutoIncrementValues(this.getTable(table));\n        })).then(results => {\n            results.forEach((result: any, index) => {\n                QueryHelper.autoIncrementValues[this.query.tables[index]] = result;\n            });\n            this.startExecution_();\n        }).catch(this.onError);\n    }\n\n    private startExecution_() {\n        const select = (qry: SelectQuery) => {\n            return this.pushReq_({\n                name: API.Select,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const insert = (qry: InsertQuery) => {\n            return this.pushReq_({\n                name: API.Insert,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const update = (qry: UpdateQuery) => {\n            return this.pushReq_({\n                name: API.Update,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const remove = (qry: RemoveQuery) => {\n            return this.pushReq_({\n                name: API.Remove,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const count = (qry: CountQuery) => {\n            return this.pushReq_({\n                name: API.Count,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const setResult = (key: string, value) => {\n            this.results[key] = value;\n        };\n        const getResult = (key: string) => {\n            return this.results[key];\n        };\n        const abort = (msg: string) => {\n            this.abortTx_(msg);\n        };\n\n        const start = () => {\n            this.checkQueries_(this.reqQueue).then(_ => {\n                this.startTx_();\n            }).catch((err) => {\n                this.onError(err);\n            });\n        };\n        const methodName = this.query.method\n        let txLogic = self[methodName];\n        if (!txLogic) {\n            return this.onError({\n                type: ERROR_TYPE.MethodNotExist,\n                message: `method ${methodName} does not exist.`\n            })\n        }\n        txLogic.call(\n            this,\n            {\n                data: this.query.data,\n                insert: insert, select: select,\n                update: update, remove: remove,\n                count: count, setResult: setResult,\n                getResult: getResult, abort: abort,\n                start: start\n            }\n        );\n\n        if (process.env.NODE_ENV === 'dev') {\n            console.log(`transaction query started`);\n        }\n    }\n\n    private startTx_() {\n        try {\n            this.isTxStarted_ = true;\n            this.initTx_(this.query.tables);\n            this.processExecutionOfQry_();\n        }\n        catch (ex) {\n            this.onExceptionOccured(ex);\n        }\n    }\n\n    private initTx_(tableNames: string[]) {\n        this.createTransaction(tableNames, this.onTxCompleted_.bind(this));\n    }\n\n    private onTxCompleted_() {\n        if (process.env.NODE_ENV === 'dev') {\n            console.log(`transaction finished`);\n        }\n        this.onSuccess(this.results);\n    }\n\n    private onReqFinished_(result) {\n        const finisehdRequest = this.reqQueue.shift();\n        if (process.env.NODE_ENV === 'dev') {\n            console.log(`finished request : ${finisehdRequest.name} `);\n        }\n        if (finisehdRequest) {\n            if (this.error) {\n                this.abortTx_(\"automatic abort of transaction due to error occured\");\n                if (process.env.NODE_ENV === 'dev') {\n                    console.log(`transaction aborted due to error occured`);\n                }\n                this.onErrorOccured(this.error);\n            }\n            else {\n                this.isQueryExecuting = false;\n                if (finisehdRequest.onSuccess) {\n                    finisehdRequest.onSuccess(result);\n                }\n                this.processExecutionOfQry_();\n            }\n        }\n    }\n\n    private abortTx_(msg: string) {\n        if (this.transaction != null) {\n            this.transaction.abort();\n            if (process.env.NODE_ENV === 'dev') {\n                console.log(`transaction aborted. Msg : ${msg}`);\n            }\n        }\n    }\n\n    private executeRequest_(request: WebWorkerRequest) {\n        this.isQueryExecuting = true;\n        let requestObj;\n        if (process.env.NODE_ENV === 'dev') {\n            console.log(`executing request : ${request.name} `);\n        }\n        const onReqFinished = this.onReqFinished_.bind(this);\n        const onError = this.onError.bind(this);\n        const query = request.query\n        switch (request.name) {\n            case API.Select:\n                requestObj = new Select.Instance(\n                    query, onReqFinished, onError\n                );\n                break;\n            case API.Insert:\n                requestObj = new Insert.Instance(\n                    query, onReqFinished, onError\n                );\n                break;\n            case API.Update:\n                requestObj = new Update.Instance(\n                    query, onReqFinished, onError\n                );\n                break;\n            case API.Remove:\n                requestObj = new Remove.Instance(\n                    query, onReqFinished, onError\n                );\n                break;\n            case API.Count:\n                requestObj = new Count.Instance(\n                    query, onReqFinished, onError\n                );\n                break;\n        }\n        requestObj.isTransaction = true;\n        requestObj.execute();\n    }\n\n    private pushReq_(request: WebWorkerRequest) {\n        const push = () => {\n            this.reqQueue.push(request);\n        };\n        const promiseObj = promise((resolve, reject) => {\n            request.onSuccess = (result) => {\n                resolve(result);\n            };\n            request.onError = (error) => {\n                this.error = error;\n                reject(error);\n            };\n        });\n        if (this.isTxStarted_ === true) {\n            this.checkQueries_([request]).then(() => {\n                push();\n                this.processExecutionOfQry_();\n            }).catch(err => {\n                this.error = err;\n                this.abortTx_(JSON.stringify(err));\n            });\n        }\n        else {\n            push();\n        }\n        if (process.env.NODE_ENV === 'dev') {\n            console.log(`request pushed : ${request.name} with query value - ${JSON.stringify(request.query)}`);\n        }\n        return promiseObj;\n    }\n\n    private processExecutionOfQry_() {\n        if (this.reqQueue.length > 0 && this.isQueryExecuting === false) {\n            this.executeRequest_(this.reqQueue[0]);\n        }\n    }\n\n    private checkQueries_(requestQueue: WebWorkerRequest[]) {\n        return promiseAll(requestQueue.map(request => {\n            return new QueryHelper(request.name, request.query).checkAndModify();\n        }));\n    }\n\n    private getNotExistingTable_(tables: string[]) {\n        let invalidTable: string = null;\n        tables.every(table => {\n            if (this.isTableExist(table) === false) {\n                invalidTable = table;\n                return false;\n            }\n            return true;\n        });\n        return invalidTable;\n    }\n}","import { Table } from \"./table\";\nimport { Column } from \"./column\";\nimport { KeyStore } from \"../keystore/index\";\nimport { IdbHelper } from \"../business/index\";\nimport { promise } from \"../helpers/index\";\n\nexport class TableHelper {\n    name: string;\n    columns: Column[] = [];\n\n    // internal Members\n    primaryKey: string;\n    version: number;\n    requireDelete = false;\n    requireCreation = false;\n    private callback_: (tableHelperObj: TableHelper) => void;\n\n    constructor(table: Table) {\n        this.name = table.name;\n        this.version = table.version;\n        this.columns = table.columns;\n        this.setPrimaryKey_();\n    }\n\n    createMetaData(dbName: string): Promise<TableHelper> {\n        return promise((resolve) => {\n            this.callback_ = resolve;\n            this.setRequireDelete_(dbName);\n            this.setDbVersion_(dbName);\n        });\n    }\n\n    private setPrimaryKey_() {\n        this.columns.every((item) => {\n            this.primaryKey = item.primaryKey ? item.name : \"\";\n            return !item.primaryKey;\n        });\n    }\n\n    private setRequireDelete_(dbName: string) {\n        KeyStore.get<number>(`JsStore_${dbName}_${this.name}_Version`).then(tableVersion => {\n            if (tableVersion == null) {\n                this.requireCreation = true;\n            }\n            // mark only table which has version greater than store version\n            else if (tableVersion < this.version) {\n                this.requireDelete = true;\n            }\n        });\n    }\n\n    private setDbVersion_(dbName: string) {\n        IdbHelper.activeDbVersion = IdbHelper.activeDbVersion > this.version ? IdbHelper.activeDbVersion : this.version;\n        // setting db version\n        KeyStore.set(`JsStore_${dbName}_Db_Version`, IdbHelper.activeDbVersion);\n        // setting table version\n        KeyStore.set(`JsStore_${dbName}_${this.name}_Version`, IdbHelper.activeDbVersion).then(() => {\n            this.version = IdbHelper.activeDbVersion;\n            this.callback_(this);\n        });\n    }\n}","import { DataBase } from \"./database\";\nimport { TableHelper } from \"./table_helper\";\nimport { Table } from \"./table\";\nimport { promiseAll } from \"../helpers/index\";\n\nexport class DbHelper {\n    dbName: string;\n    tables: Table[] = [];\n\n    constructor(dataBase: DataBase) {\n        this.dbName = dataBase.name;\n        this.tables = dataBase.tables;\n    }\n\n    createMetaData() {\n        return promiseAll(\n            this.tables.map((table) => {\n                return new TableHelper(table).createMetaData(this.dbName);\n            })\n        );\n    }\n}","import { IColumnOption } from \"../../common/index\";\n\nexport class Column implements IColumnOption {\n    name: string;\n    autoIncrement: boolean;\n    primaryKey: boolean;\n    unique: boolean;\n    notNull: boolean;\n    dataType: string;\n    default;\n    multiEntry: boolean;\n    enableSearch: boolean;\n    keyPath: string[];\n\n    constructor(key: Column) {\n        this.name = key.name;\n        this.autoIncrement = key.autoIncrement != null ? key.autoIncrement : false;\n        this.primaryKey = key.primaryKey != null ? key.primaryKey : false;\n        this.unique = key.unique != null ? key.unique : false;\n        this.notNull = key.notNull != null ? key.notNull : false;\n        this.dataType = key.dataType != null ? key.dataType : (key.autoIncrement ? 'number' : null);\n        this.default = key.default;\n        this.multiEntry = key.multiEntry == null ? false : key.multiEntry;\n        this.enableSearch = key.enableSearch == null ? true : key.enableSearch;\n        this.keyPath = key.keyPath;\n    }\n\n}","import { Column } from \"./column\";\nimport { ITable } from \"../../common/index\";\n\nexport class Table {\n    name: string;\n    columns: Column[] = [];\n    version: number;\n    primaryKey: string;\n\n    constructor(table: ITable) {\n        this.name = table.name;\n        this.version = table.version == null ? 1 : table.version;\n        for (const columnName in table.columns) {\n            const column = {\n                name: columnName\n            } as Column;\n\n            for (const feature in table.columns[columnName]) {\n                const value = table.columns[columnName][feature];\n                switch (feature) {\n                    case 'primaryKey':\n                    case 'autoIncrement':\n                    case 'unique':\n                    case 'dataType':\n                    case 'enableSearch':\n                    case 'keyPath':\n                    case 'multiEntry':\n                    case 'default':\n                    case 'notNull':\n                        column[feature] = value as never; break;\n                }\n            }\n            this.columns.push(new Column(column));\n        }\n    }\n}","\nimport { Table } from \"./table\";\nimport { IDataBase } from \"../../common/index\";\n \nexport class DataBase {\n    name: string;\n    tables: Table[] = [];\n\n    constructor(dataBase: IDataBase) {\n        this.name = dataBase.name;\n        dataBase.tables.forEach((item) => {\n            this.tables.push(new Table(item));\n        });\n    }\n}\n","import * as Select from '../select/index';\nimport { SelectQuery, IError } from '../../../common/index';\nimport { Base } from '../base';\n\n\nexport class Union extends Base {\n    execute(query: SelectQuery[], onSuccess: (results: object[]) => void, onError: (err: IError) => void) {\n        let index = 0;\n        const hashMap = {};\n        let isQueryForSameTable = true;\n        const queryLength = query.length;\n        query.every((qry, i) => {\n            if (i + 1 < queryLength && qry.from !== query[i + 1].from) {\n                isQueryForSameTable = false;\n                return false;\n            }\n            return true;\n        });\n        let getHashKey;\n        if (isQueryForSameTable) {\n            const pKey = this.getPrimaryKey(query[0].from);\n            getHashKey = (val) => {\n                return val[pKey];\n            };\n        }\n        else {\n            getHashKey = (val) => {\n                let columnValKey = \"\";\n                for (const key in val) {\n                    columnValKey += val[key];\n                }\n                return columnValKey;\n            };\n        }\n\n        const fetchData = () => {\n            if (index < query.length) {\n                new Select.Instance(query[index++], (selectResult) => {\n                    selectResult.forEach(val => {\n                        hashMap[getHashKey(val)] = val;\n                    });\n                    fetchData();\n                }, onError).execute();\n            }\n            else {\n                const results = [];\n                for (const key in hashMap) {\n                    results.push(hashMap[key]);\n                }\n                onSuccess(results);\n            }\n        };\n        fetchData();\n    }\n\n\n}","import * as Select from '../select/index';\nimport { IError, IntersectQuery } from '../../../common/index';\nimport { Helper } from '../select/orderby_helper';\n\n\nexport class Intersect extends Helper {\n    execute(intersectQry: IntersectQuery, onSuccess: (results: object[]) => void, onError: (err: IError) => void) {\n        this.query = intersectQry as any;\n        let index = 0;\n        let hashMap = {};\n        let hashMapTemp = {};\n        let isQueryForSameTable = true;\n        const query = intersectQry.queries;\n        const queryLength = query.length;\n        query.every((qry, i) => {\n            if (i + 1 < queryLength && qry.from !== query[i + 1].from) {\n                isQueryForSameTable = false;\n                return false;\n            }\n            return true;\n        });\n        let getHashKey;\n        if (isQueryForSameTable) {\n            const pKey = this.getPrimaryKey(query[0].from);\n            getHashKey = (val) => {\n                return val[pKey];\n            };\n        }\n        else {\n            getHashKey = (val) => {\n                let columnValKey = \"\";\n                for (const key in val) {\n                    columnValKey += val[key];\n                }\n                return columnValKey;\n            };\n        }\n\n\n        const fetchData = () => {\n            if (index < queryLength) {\n                new Select.Instance(query[index], (selectResult) => {\n                    hashMap = {};\n                    selectResult.forEach(val => {\n                        const columnValKey = getHashKey(val);\n                        if (index === 0) {\n                            hashMapTemp[columnValKey] = val;\n                        } else if (hashMapTemp[columnValKey] != null) {\n                            hashMap[columnValKey] = val;\n                        }\n                    });\n                    if (index > 0) {\n                        hashMapTemp = { ...hashMap };\n                    }\n\n                    ++index;\n                    fetchData();\n                }, onError).execute();\n            }\n            else {\n                const results = [];\n                let resultPusher: (key: string) => void;\n                let skip = intersectQry.skip;\n                const limit = intersectQry.limit;\n                const onFinished = () => {\n                    this.results = results;\n                    this.query.join = {} as any;\n                    this.processOrderBy();\n                    this.processGroupDistinctAggr();\n                    onSuccess(this.results);\n                };\n                let shouldStopLoop = false;\n                let key: string;\n                const pushResult = () => {\n                    results.push(hashMap[key]);\n                };\n                const checkLimitAndPush = () => {\n                    if (results.length < limit) {\n                        pushResult();\n                    }\n                    else {\n                        shouldStopLoop = true;\n                    }\n                };\n                const skipChecker = (callBack: () => void) => {\n                    if (skip === 0) {\n                        callBack();\n                    }\n                    else {\n                        --skip;\n                    }\n                };\n                if (intersectQry.skip && intersectQry.limit) {\n                    resultPusher = () => {\n                        skipChecker(() => {\n                            checkLimitAndPush();\n                        });\n                    };\n\n                }\n                else if (intersectQry.limit) {\n                    resultPusher = checkLimitAndPush;\n                }\n                else if (intersectQry.skip) {\n                    resultPusher = () => {\n                        skipChecker(() => {\n                            pushResult();\n                        });\n                    };\n                }\n                else {\n                    resultPusher = () => {\n                        pushResult();\n                    };\n                }\n                if (limit) {\n                    for (key in hashMap) {\n                        resultPusher(key);\n                        if (shouldStopLoop) {\n                            break;\n                        }\n                    }\n                }\n                else {\n                    for (key in hashMap) {\n                        resultPusher(key);\n                    }\n                }\n                onFinished();\n            }\n        };\n        fetchData();\n    }\n}","import { IdbHelper, DropDb, InitDb, Clear, QueryHelper } from \"./business/index\";\nimport * as Select from './business/select/index';\nimport * as Count from './business/count/index';\nimport * as Insert from './business/insert/index';\nimport * as Remove from './business/remove/index';\nimport * as Update from './business/update/index';\nimport * as Transaction from \"./business/transaction/index\";\nimport { LogHelper } from \"./log_helper\";\nimport {\n    UpdateQuery, InsertQuery, RemoveQuery, SelectQuery, CountQuery, SetQuery,\n    CONNECTION_STATUS, ERROR_TYPE, DATA_TYPE, API,\n    WebWorkerResult, WebWorkerRequest, IDataBase, IError\n} from \"../common/index\";\nimport { Config } from \"./config\";\nimport { KeyStore } from \"./keystore/index\";\nimport { TableHelper, DbHelper, DataBase } from \"./model/index\";\nimport { promise } from \"./helpers/index\";\nimport { getDataType } from \"./utils/index\";\nimport { Union } from './business/union/index';\nimport { Intersect } from \"./business/intersect/index\";\nexport class QueryExecutor {\n    static isTransactionQuery = false;\n    onQueryFinished: (result: any) => void;\n\n    constructor(fn?: (result: any) => void) {\n        this.onQueryFinished = fn;\n        QueryHelper.autoIncrementValues = {};\n    }\n\n    checkConnectionAndExecuteLogic(request: WebWorkerRequest) {\n        LogHelper.log('request executing:' + request.name);\n        switch (request.name) {\n            case API.InitDb:\n            case API.IsDbExist:\n            case API.GetDbVersion:\n            case API.GetDbList:\n            case API.GetDbSchema:\n            case API.Get:\n            case API.Set:\n            case API.ChangeLogStatus:\n            case API.Terminate:\n            case API.OpenDb:\n            case API.InitKeyStore:\n            case API.CloseDb:\n                const err = this.checkForIdbSupport_();\n                if (err == null) {\n                    this.executeLogic_(request);\n                }\n                else {\n                    this.returnResult_({\n                        errorDetails: err,\n                        errorOccured: true\n                    } as WebWorkerResult);\n                }\n                break;\n            default:\n                switch (this.dbStatus_.conStatus) {\n                    case CONNECTION_STATUS.Connected: {\n                        this.executeLogic_(request);\n                    } break;\n                    case CONNECTION_STATUS.Closed: {\n                        if (this.isDbDeletedByBrowser_ === true) {\n                            this.initDb_(null, () => {\n                                this.isDbDeletedByBrowser_ = false;\n                                this.checkConnectionAndExecuteLogic(request);\n                            }, request.onError);\n                        }\n                        else {\n                            this.initDb_(this.activeDb_ as any, () => {\n                                this.checkConnectionAndExecuteLogic(request);\n                            }, request.onError);\n                        }\n                    } break;\n\n                }\n        }\n    }\n\n    private changeLogStatus_(status: boolean, onSuccess, onError) {\n        Config.isLogEnabled = status;\n        onSuccess();\n    }\n\n    private returnResult_(result) {\n        if (Config.isRuningInWorker === true) {\n            (self as any).postMessage(result);\n        }\n        else {\n            this.onQueryFinished(result);\n        }\n\n    }\n\n    private executeLogic_(request: WebWorkerRequest) {\n        const onSuccess = (results?) => {\n            this.returnResult_({\n                returnedValue: results\n            } as WebWorkerResult);\n        };\n        const onError = (err) => {\n            this.returnResult_({\n                errorDetails: err,\n                errorOccured: true\n            } as WebWorkerResult);\n        };\n\n        QueryExecutor.isTransactionQuery = request.name === API.Transaction;\n        switch (request.name) {\n            case API.InitDb:\n                if (this.isDbDeletedByBrowser_ === true) {\n                    this.initDb_(null, () => {\n                        this.isDbDeletedByBrowser_ = false;\n                        onSuccess();\n                    }, onError);\n                }\n                else {\n                    this.initDb_(request.query as IDataBase, onSuccess, onError);\n                }\n                break;\n            case API.OpenDb:\n                this.openDb_(request.query, onSuccess, onError); break;\n            case API.Select:\n                new Select.Instance(request.query as SelectQuery, onSuccess, onError).execute();\n                break;\n            case API.Insert: new Insert.Instance(request.query as InsertQuery, onSuccess, onError).execute();\n                break;\n            case API.Update:\n                new Update.Instance(request.query as UpdateQuery, onSuccess, onError).execute();\n                break;\n            case API.Remove:\n                new Remove.Instance(request.query as RemoveQuery, onSuccess, onError).execute();\n                break;\n            case API.IsDbExist: this.isDbExist_(request.query, onSuccess, onError);\n                break;\n            case API.GetDbVersion:\n                this.getDbVersion_(request.query as string).then(onSuccess).catch(onError);\n                break;\n            case API.GetDbList:\n                this.getDbList_().then(onSuccess).catch(onError);\n                break;\n            case API.GetDbSchema:\n                this.getDbSchema_(request.query as string).then(onSuccess).catch(onError);\n                break;\n            case API.Clear: new Clear(request.query as string, onSuccess, onError).execute();\n                break;\n            case API.DropDb: this.dropDb_(onSuccess, onError);\n                break;\n            case API.Count:\n                new Count.Instance(request.query as CountQuery, onSuccess, onError).execute();\n                break;\n            case API.Get: this.get_(request.query as string).then(onSuccess).catch(onError);\n                break;\n            case API.Set: this.set_(request.query as SetQuery).then(onSuccess).catch(onError);\n                break;\n            case API.ChangeLogStatus:\n                this.changeLogStatus_(request.query as boolean, onSuccess, onError);\n                break;\n            case API.Transaction: new Transaction.Instance(request.query, onSuccess, onError).execute();\n                break;\n            case API.CloseDb:\n            case API.Terminate:\n                this.terminate_(onSuccess, onError);\n                break;\n            case API.Union:\n                new Union().execute(request.query, onSuccess, onError);\n                break;\n            case API.InitKeyStore:\n                this.initKeyStore_(onSuccess);\n                break;\n            case API.Intersect:\n                new Intersect().execute(request.query, onSuccess, onError);\n                break;\n            case API.ImportScripts:\n                try {\n                    importScripts(...request.query);\n                    onSuccess();\n                } catch (e) {\n                    onError({\n                        type: ERROR_TYPE.ImportScriptsFailed,\n                        message: e.message\n                    });\n                }\n                break;\n            default:\n                if (process.env.NODE_ENV === 'dev') {\n                    console.error('The Api:-' + request.name + ' does not support.');\n                }\n        }\n    }\n\n    private openDb_(dbName: string, onSuccess, onError) {\n        if (this.activeDb_ != null && this.activeDb_.name === dbName) {\n            this.processCreateDb(this.activeDb_).then(onSuccess).catch(onError);\n        }\n        else {\n            this.getDbSchema_(dbName).then((db) => {\n                if (db != null) {\n                    this.processCreateDb(db).then(onSuccess).catch(onError);\n                }\n                else {\n                    onError(new LogHelper(ERROR_TYPE.DbNotExist, { dbName: dbName }).get());\n                }\n            }).catch(onError);\n        }\n    }\n\n    private initKeyStore_(onSuccess) {\n        KeyStore.init().then(onSuccess()).catch(() => {\n            IdbHelper.dbStatus = {\n                conStatus: CONNECTION_STATUS.UnableToStart,\n                lastError: ERROR_TYPE.IndexedDbNotSupported,\n            };\n        });\n    }\n\n    private getDbSchema_(dbName: string) {\n        return IdbHelper.getDbSchema(dbName);\n    }\n\n    private terminate_(onSuccess: () => void, onError: (err: IError) => void) {\n        KeyStore.close().then(() => {\n            this.closeDb_();\n            onSuccess();\n        });\n    }\n\n    private get isDbDeletedByBrowser_() {\n        return IdbHelper.isDbDeletedByBrowser;\n    }\n\n    private set isDbDeletedByBrowser_(value) {\n        IdbHelper.isDbDeletedByBrowser = value;\n    }\n\n    private getDbList_() {\n        return IdbHelper.getDbList();\n    }\n\n    private get activeDb_() {\n        return IdbHelper.activeDb;\n    }\n\n    private set activeDb_(value) {\n        IdbHelper.activeDb = value;\n    }\n\n    private closeDb_() {\n        if (IdbHelper.dbStatus.conStatus === CONNECTION_STATUS.Connected) {\n            IdbHelper.dbStatus.conStatus = CONNECTION_STATUS.ClosedByJsStore;\n            IdbHelper.dbConnection.close();\n        }\n    }\n\n    private dropDb_(onSuccess: () => void, onError: (err: IError) => void) {\n        this.closeDb_();\n        new DropDb(onSuccess, onError).deleteDb();\n    }\n\n\n\n    private processCreateDb(db: DataBase) {\n        return promise((res, rej) => {\n            // create meta data\n            const dbHelper = new DbHelper(db);\n            dbHelper.createMetaData().then((tablesMetaData: TableHelper[]) => {\n                this.activeDb_ = db;\n                const createDbInstance = new InitDb((isDbCreated) => {\n                    this.activeDb_ = db;\n                    if (isDbCreated) {\n                        // save dbSchema in keystore\n                        KeyStore.set(\"JsStore_\" + db.name + \"_Schema\", db);\n                    }\n                    res(isDbCreated);\n                }, rej);\n                createDbInstance.execute(tablesMetaData);\n            });\n        });\n    }\n\n    private initDb_(\n        dataBase: IDataBase, onSuccess: () => void, onError: (err: IError) => void\n    ) {\n        if (dataBase == null) {\n            this.processCreateDb(this.activeDb_);\n        }\n        else {\n            this.closeDb_();\n            this.getDbVersion_(dataBase.name).then(version => {\n                this.activeDbVersion_ = version ? version : 1;\n                this.processCreateDb(new DataBase(dataBase)).then(onSuccess).catch(onError);\n            }).catch(onError);\n        }\n\n    }\n\n    private get activeDbVersion_() {\n        return IdbHelper.activeDbVersion;\n    }\n\n    private set activeDbVersion_(value) {\n        IdbHelper.activeDbVersion = value;\n    }\n\n    private getDbVersion_(dbName: string) {\n        return IdbHelper.getDbVersion(dbName);\n    }\n\n    private get dbStatus_() {\n        return IdbHelper.dbStatus;\n    }\n\n    private checkForIdbSupport_() {\n        if (this.dbStatus_.conStatus === CONNECTION_STATUS.UnableToStart) {\n            const error = {\n                type: this.dbStatus_.lastError,\n            } as IError;\n            switch (error.type) {\n                case ERROR_TYPE.IndexedDbNotSupported:\n                    error.message = \"Browser does not support IndexedDB\"; break;\n                default:\n                    error.message = \"unknown error occured\";\n            }\n            return error;\n        }\n    }\n\n    private isDbExist_(dbInfo, onSuccess: (isExist: boolean) => void, onError: (err: IError) => void) {\n        if (getDataType(dbInfo) === DATA_TYPE.String) {\n            this.getDbVersion_(dbInfo).then(function (dbVersion) {\n                onSuccess(Boolean(dbVersion));\n            });\n        }\n        else {\n            this.getDbVersion_(dbInfo.dbName).then(function (dbVersion) {\n                onSuccess(dbInfo.table.version <= dbVersion);\n            });\n        }\n    }\n\n    private get_(key: string) {\n        return KeyStore.get(key);\n    }\n\n    private set_(query: SetQuery) {\n        return KeyStore.set(query.key, query.value);\n    }\n}","import { QueryExecutor } from \"./query_executor\";\nimport { Config } from \"./config\";\nimport { IdbHelper } from \"./business/index\";\nimport { CONNECTION_STATUS, ERROR_TYPE } from \"../common/index\";\n\nexport const initialize = function () {\n    if (typeof (self as any).alert === 'undefined' && typeof ServiceWorkerGlobalScope === 'undefined') {\n        Config.isRuningInWorker = true;\n        (self as any).onmessage = function (e) {\n            new QueryExecutor().checkConnectionAndExecuteLogic(e.data);\n        };\n    }\n};\n\nconst onIdbNotSupproted = () => {\n    IdbHelper.dbStatus = {\n        conStatus: CONNECTION_STATUS.UnableToStart,\n        lastError: ERROR_TYPE.IndexedDbNotSupported\n    };\n};\n\nconst setCrossBrowserIndexedDb = () => {\n    try {\n        if (!indexedDB) {\n            indexedDB = (self as any).mozIndexedDB ||\n                (self as any).webkitIndexedDB || (self as any).msIndexedDB;\n        }\n        if (indexedDB) {\n            IDBTransaction = IDBTransaction ||\n                (self as any).webkitIDBTransaction || (self as any).msIDBTransaction;\n            (self as any).IDBKeyRange = (self as any).IDBKeyRange ||\n                (self as any).webkitIDBKeyRange || (self as any).msIDBKeyRange;\n        }\n        else {\n            onIdbNotSupproted();\n        }\n    } catch (ex) {\n        onIdbNotSupproted();\n    }\n};\n\nsetCrossBrowserIndexedDb();\ninitialize();\n"],"sourceRoot":""}